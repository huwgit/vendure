{"version":3,"file":"737.75393c9779ffe2a1.js","mappings":"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","names":["upsertConfigMutation","gql","getConfigQuery","getAllInvoicesQuery","i0","_r3","ctx_r2","save","ctx_r4","testDownload","ctx_r0","form","htmlFormInputConfigArgsDef","get","invalid","pristine","invoice_r5","invoiceNumber","createdAt","customerEmail","_c0","orderId","orderCode","downloadUrl","InvoicesComponent","constructor","formBuilder","dataService","changeDetector","notificationService","localStorageService","this","itemsPerPage","page","selectedInvoices","name","type","list","required","ui","component","isSelected","row","find","selected","id","group","enabled","templateString","serverPath","getServerLocation","ngOnInit","_this","_asyncToGenerator","query","mapStream","d","invoiceConfig","subscribe","config","controls","setValue","getAllInvoices","_this2","input","r","invoices","result","invoicesList","_this3","dirty","formValue","value","result$","mutate","upsertInvoiceConfig","firstValueFrom","source","hasConfig","Promise","resolve","reject","subscriber","SafeSubscriber","next","unsubscribe","error","complete","defaultValue","EmptyError","markAsPristine","markForCheck","success","entity","downloadSelected","_this4","nrs","map","i","join","res","fetch","headers","getHeaders","ok","json","Error","message","blob","downloadBlob","err","console","setPageNumber","_this5","setItemsPerPage","nrOfItems","_this6","Number","toggleSelect","filter","s","push","toggleSelectAll","areAllSelected","items","length","_this7","template","method","body","JSON","stringify","channelToken","authToken","authorization","fileName","openInNewTab","blobUrl","window","URL","createObjectURL","a","document","createElement","appendChild","setAttribute","href","download","click","static","t","i1","i2","core","Xpm","selectors","decls","vars","consts","rf","ctx","InvoicesComponent_clr_accordion_content_5_Template","$event","InvoicesComponent_ng_template_25_Template","totalItems","InvoicesModule","oAB","cJS","SharedModule","RouterModule","forChild","path","pathMatch","data","breadcrumb"],"sourceRoot":"webpack:///","sources":["./src/extensions/d78f98ca8e756c711e36abf17554d6e713fe44167b20e17cef6694bb81048786/queries.graphql.ts","./src/extensions/d78f98ca8e756c711e36abf17554d6e713fe44167b20e17cef6694bb81048786/invoices.component.ts","../node_modules/rxjs/dist/esm/internal/firstValueFrom.js","./src/extensions/d78f98ca8e756c711e36abf17554d6e713fe44167b20e17cef6694bb81048786/invoices.module.ts"],"sourcesContent":["import gql from 'graphql-tag';\n\nexport const upsertConfigMutation = gql`\n  mutation upsertInvoiceConfig($input: InvoiceConfigInput!) {\n    upsertInvoiceConfig(input: $input) {\n      id\n      enabled\n      templateString\n    }\n  }\n`;\n\nexport const getConfigQuery = gql`\n  query invoiceConfig {\n    invoiceConfig {\n      id\n      enabled\n      templateString\n    }\n  }\n`;\n\nexport const getAllInvoicesQuery = gql`\n  query invoices($input: InvoicesListInput) {\n    invoices(input: $input) {\n      items {\n        id\n        createdAt\n        orderCode\n        orderId\n        customerEmail\n        invoiceNumber\n        downloadUrl\n      }\n      totalItems\n    }\n  }\n`;\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  DataService,\n  getServerLocation,\n  LocalStorageService,\n  NotificationService,\n} from '@vendure/admin-ui/core';\nimport {\n  getAllInvoicesQuery,\n  getConfigQuery,\n  upsertConfigMutation,\n} from './queries.graphql';\nimport {\n  Invoice,\n  InvoiceConfig,\n  InvoiceConfigQuery,\n  InvoiceList,\n  InvoicesQuery,\n  InvoicesQueryVariables,\n  UpsertInvoiceConfigMutation,\n  UpsertInvoiceConfigMutationVariables,\n} from './generated/graphql';\nimport { firstValueFrom } from 'rxjs';\nimport { ConfigArgDefinition } from '@vendure/common/lib/generated-types';\n\n@Component({\n  selector: 'invoices-component',\n  template: `\n    <div class=\"page-block\">\n      <clr-accordion>\n        <clr-accordion-panel>\n          <clr-accordion-title>Settings</clr-accordion-title>\n          <clr-accordion-content *clrIfExpanded>\n            <section class=\"form-block\">\n              <form class=\"form\" [formGroup]=\"form\">\n                <vdr-form-field label=\"Generate invoices on\" for=\"enabled\">\n                  <clr-checkbox-wrapper>\n                    <input\n                      type=\"checkbox\"\n                      clrCheckbox\n                      formControlName=\"enabled\"\n                    />\n                  </clr-checkbox-wrapper>\n                </vdr-form-field>\n                <vdr-form-field label=\"HTML template\" for=\"templateString\">\n                  <vdr-dynamic-form-input\n                    formControlName=\"templateString\"\n                    [readonly]=\"false\"\n                    [def]=\"htmlFormInputConfigArgsDef\"\n                    [control]=\"form.get('templateString')\"\n                    style=\"max-width: 100%;\"\n                  >\n                  </vdr-dynamic-form-input>\n                </vdr-form-field>\n                <button\n                  class=\"btn btn-primary\"\n                  (click)=\"save()\"\n                  [disabled]=\"form.invalid || form.pristine\"\n                >\n                  Save\n                </button>\n                <button class=\"btn btn-secondary\" (click)=\"testDownload()\">\n                  Preview\n                </button>\n                <vdr-help-tooltip\n                  content=\"Preview the HTML template. Uses the most recent placed order. Just a preview, it doesn't save any invoices!\"\n                ></vdr-help-tooltip>\n              </form>\n            </section>\n          </clr-accordion-content>\n        </clr-accordion-panel>\n      </clr-accordion>\n\n      <hr />\n      <section>\n        <h2>Created invoices</h2>\n        <button\n          class=\"btn btn-primary\"\n          (click)=\"downloadSelected()\"\n          [disabled]=\"selectedInvoices?.length == 0\"\n        >\n          Download\n        </button>\n        <br />\n        <br />\n        <vdr-data-table\n          [items]=\"invoicesList?.items\"\n          [itemsPerPage]=\"itemsPerPage\"\n          [totalItems]=\"invoicesList?.totalItems\"\n          [currentPage]=\"page\"\n          (pageChange)=\"setPageNumber($event)\"\n          (itemsPerPageChange)=\"setItemsPerPage($event)\"\n          [allSelected]=\"areAllSelected()\"\n          [isRowSelectedFn]=\"isSelected\"\n          (rowSelectChange)=\"toggleSelect($event)\"\n          (allSelectChange)=\"toggleSelectAll()\"\n        >\n          <vdr-dt-column>Invoice nr.</vdr-dt-column>\n          <vdr-dt-column>Created</vdr-dt-column>\n          <vdr-dt-column>Customer</vdr-dt-column>\n          <vdr-dt-column>Order</vdr-dt-column>\n          <vdr-dt-column>Download</vdr-dt-column>\n          <ng-template let-invoice=\"item\">\n            <td class=\"left align-middle\">{{ invoice.invoiceNumber }}</td>\n            <td class=\"left align-middle\">\n              {{ invoice.createdAt | date }}\n            </td>\n            <td class=\"left align-middle\">{{ invoice.customerEmail }}</td>\n            <td class=\"left align-middle\">\n              <a [routerLink]=\"['/orders', invoice.orderId]\">\n                {{ invoice.orderCode }}\n              </a>\n            </td>\n            <td class=\"left align-middle\">\n              <a [href]=\"invoice.downloadUrl\" target=\"_blank\">\n                <clr-icon shape=\"download\"></clr-icon>\n              </a>\n            </td>\n          </ng-template>\n        </vdr-data-table>\n      </section>\n    </div>\n  `,\n})\nexport class InvoicesComponent implements OnInit {\n  form: FormGroup;\n  invoicesList: InvoiceList | undefined;\n  itemsPerPage = 10;\n  page = 1;\n  selectedInvoices: Invoice[] = [];\n  serverPath: string;\n  htmlFormInputConfigArgsDef: ConfigArgDefinition = {\n    name: 'templateString',\n    type: 'text',\n    list: false,\n    required: false,\n    ui: { component: 'html-editor-form-input' },\n  };\n\n  constructor(\n    private formBuilder: FormBuilder,\n    protected dataService: DataService,\n    private changeDetector: ChangeDetectorRef,\n    private notificationService: NotificationService,\n    private localStorageService: LocalStorageService\n  ) {\n    this.form = this.formBuilder.group({\n      enabled: ['enabled'],\n      templateString: ['templateString'],\n    });\n    this.serverPath = getServerLocation();\n  }\n\n  async ngOnInit(): Promise<void> {\n    this.dataService\n      .query<InvoiceConfigQuery>(getConfigQuery)\n      .mapStream((d) => d.invoiceConfig)\n      .subscribe((config) => {\n        this.form.controls['enabled'].setValue(config?.enabled);\n        this.form.controls['templateString'].setValue(config?.templateString);\n      });\n    await this.getAllInvoices();\n  }\n\n  async getAllInvoices(): Promise<void> {\n    await this.dataService\n      .query<InvoicesQuery, InvoicesQueryVariables>(getAllInvoicesQuery, {\n        input: {\n          page: this.page,\n          itemsPerPage: this.itemsPerPage,\n        },\n      })\n      .mapStream((r) => r.invoices)\n      .subscribe((result) => {\n        this.invoicesList = result;\n      });\n  }\n\n  async save() {\n    try {\n      if (this.form.dirty) {\n        const formValue = this.form.value;\n        const result$ = await this.dataService.mutate<\n          UpsertInvoiceConfigMutation,\n          UpsertInvoiceConfigMutationVariables\n        >(upsertConfigMutation, {\n          input: {\n            enabled: formValue.enabled,\n            templateString: formValue.templateString,\n          },\n        });\n        const { upsertInvoiceConfig: result } = await firstValueFrom(result$);\n        this.form.controls['enabled'].setValue(result.enabled);\n        this.form.controls['templateString'].setValue(result.templateString);\n      }\n      this.form.markAsPristine();\n      this.changeDetector.markForCheck();\n      this.notificationService.success('common.notify-update-success', {\n        entity: 'InvoiceConfig',\n      });\n    } catch (e: any) {\n      this.notificationService.error('common.notify-update-error', {\n        entity: 'InvoiceConfig',\n      });\n    }\n  }\n\n  async downloadSelected(): Promise<void> {\n    try {\n      const nrs = this.selectedInvoices.map((i) => i.invoiceNumber).join(',');\n      const res = await fetch(\n        `${this.serverPath}/invoices/download?nrs=${nrs}`,\n        {\n          headers: this.getHeaders(),\n        }\n      );\n      if (!res.ok) {\n        const json = await res.json();\n        throw Error(json?.message);\n      }\n      const blob = await res.blob();\n      await this.downloadBlob(blob, 'invoices.zip');\n    } catch (err: any) {\n      console.error(err);\n      this.notificationService.error(err?.message);\n    }\n  }\n\n  async setPageNumber(page: number) {\n    this.page = page;\n    await this.getAllInvoices();\n  }\n\n  async setItemsPerPage(nrOfItems: number) {\n    this.page = 1;\n    this.itemsPerPage = Number(nrOfItems);\n    await this.getAllInvoices();\n  }\n\n  isSelected = (row: Invoice): boolean => {\n    return !!this.selectedInvoices?.find((selected) => selected.id === row.id);\n  };\n\n  toggleSelect(row: Invoice): void {\n    if (this.isSelected(row)) {\n      this.selectedInvoices = this.selectedInvoices.filter(\n        (s) => s.id !== row.id\n      );\n    } else {\n      this.selectedInvoices.push(row);\n    }\n  }\n\n  toggleSelectAll() {\n    if (this.areAllSelected()) {\n      this.selectedInvoices = [];\n    } else {\n      this.selectedInvoices = this.invoicesList?.items || [];\n    }\n  }\n\n  areAllSelected(): boolean {\n    return this.selectedInvoices.length === this.invoicesList?.items.length;\n  }\n\n  async testDownload() {\n    try {\n      const template = this.form.value.templateString;\n      const res = await fetch(`${this.serverPath}/invoices/preview`, {\n        headers: {\n          ...this.getHeaders(),\n          'Content-Type': 'application/json',\n        },\n        method: 'POST',\n        body: JSON.stringify({ template }),\n      });\n      if (!res.ok) {\n        const json = await res.json();\n        throw Error(json?.message);\n      }\n      const blob = await res.blob();\n      await this.downloadBlob(blob, 'test-invoice.pdf', true);\n    } catch (err: any) {\n      console.error(err);\n      this.notificationService.error(err?.message);\n    }\n  }\n\n  private getHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n    const channelToken = this.localStorageService.get('activeChannelToken');\n    if (channelToken) {\n      headers['vendure-token'] = channelToken;\n    }\n    const authToken = this.localStorageService.get('authToken');\n    if (authToken) {\n      headers.authorization = `Bearer ${authToken}`;\n    }\n    return headers;\n  }\n\n  private async downloadBlob(\n    blob: Blob,\n    fileName: string,\n    openInNewTab = false\n  ): Promise<void> {\n    const blobUrl = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.setAttribute('hidden', 'true');\n    a.href = blobUrl;\n    if (!openInNewTab) {\n      a.download = fileName;\n    }\n    a.setAttribute('target', '_blank');\n    a.click();\n  }\n}\n","import { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\nexport function firstValueFrom(source, config) {\n    const hasConfig = typeof config === 'object';\n    return new Promise((resolve, reject) => {\n        const subscriber = new SafeSubscriber({\n            next: (value) => {\n                resolve(value);\n                subscriber.unsubscribe();\n            },\n            error: reject,\n            complete: () => {\n                if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n        source.subscribe(subscriber);\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\nimport { InvoicesComponent } from './invoices.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: InvoicesComponent,\n        data: { breadcrumb: 'Invoices' },\n      },\n    ]),\n  ],\n  providers: [],\n  declarations: [InvoicesComponent],\n})\nexport class InvoicesModule {}\n"],"x_google_ignoreList":[2]}