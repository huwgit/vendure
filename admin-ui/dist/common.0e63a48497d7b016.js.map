{"version":3,"file":"common.0e63a48497d7b016.js","mappings":"wGAEAA,SAA0B,EAc1BA,IARA,SAASC,EAAgBC,EAAOC,EAAgB,KAC5C,OAAQD,GAAS,IACZE,UAAU,OACVC,QAAQ,mBAAoB,IAC5BC,cACAD,QAAQ,uEAA6C,IACrDA,QAAQ,OAAQF,EACzB,gBCbAH,SAAiB,EAgBjBA,IATA,SAASO,EAAOC,EAAKC,GACjB,OAAa,MAATA,EACOC,MAAMC,KAAK,IAAIC,IAAIJ,IAInB,IAAI,IAAIK,IAAIL,EAAIM,IAAIC,GAAQ,CAACA,EAAKN,GAAQM,KAAQC,SAEjE","names":["exports","normalizeString","input","spaceReplacer","normalize","replace","toLowerCase","unique","arr","byKey","Array","from","Set","Map","map","item","values"],"sourceRoot":"webpack:///","sources":["../node_modules/@vendure/common/lib/normalize-string.js","../node_modules/@vendure/common/lib/unique.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeString = void 0;\n/**\n * Normalizes a string to replace non-alphanumeric and diacritical marks with\n * plain equivalents.\n * Based on https://stackoverflow.com/a/37511463/772859\n */\nfunction normalizeString(input, spaceReplacer = ' ') {\n    return (input || '')\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .toLowerCase()\n        .replace(/[!\"£$%^&*()+[\\]{};:@#~?\\\\/,|><`¬'=‘’©®™]/g, '')\n        .replace(/\\s+/g, spaceReplacer);\n}\nexports.normalizeString = normalizeString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unique = void 0;\n/**\n * @description\n * Returns an array with only unique values. Objects are compared by reference,\n * unless the `byKey` argument is supplied, in which case matching properties will\n * be used to check duplicates\n */\nfunction unique(arr, byKey) {\n    if (byKey == null) {\n        return Array.from(new Set(arr));\n    }\n    else {\n        // Based on https://stackoverflow.com/a/58429784/772859\n        return [...new Map(arr.map(item => [item[byKey], item])).values()];\n    }\n}\nexports.unique = unique;\n"],"x_google_ignoreList":[0,1]}