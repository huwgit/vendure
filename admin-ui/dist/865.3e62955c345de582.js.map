{"version":3,"file":"865.3e62955c345de582.js","mappings":"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","names":["isArray","Array","merge","args","scheduler","popScheduler","concurrent","popNumber","Infinity","argsOrArgArray","length","operate","source","subscriber","mergeAll","from","subscribe","CustomerStatusLabelComponent_vdr_chip_0_ng_container_1_Template","rf","ctx","i0","CustomerStatusLabelComponent_vdr_chip_0_ng_container_2_Template","CustomerStatusLabelComponent_vdr_chip_0_Template","ctx_r0","customer","user","verified","CustomerStatusLabelComponent_vdr_chip_1_Template","CustomerGroupMemberListComponent_ng_template_8_Template","customerGroup_r6","item","id","CustomerGroupMemberListComponent_ng_template_11_Template","customer_r7","createdAt","CustomerGroupMemberListComponent_ng_template_14_Template","customer_r8","_c0","a1","CustomerGroupMemberListComponent_ng_template_17_Template","customer_r9","title","firstName","lastName","CustomerGroupMemberListComponent_ng_template_20_Template","customer_r10","CustomerGroupMemberListComponent_ng_template_23_Template","customer_r11","emailAddress","_c1","a0","groupName","AddCustomerToGroupDialogComponent_ng_template_0_Template","group","name","_c2","count","AddCustomerToGroupDialogComponent_ng_template_4_Template","_r3","ctx_r2","cancel","ctx_r4","add","ctx_r1","selectedCustomerIds","AddressDetailDialogComponent_ng_template_0_span_0_Template","streetLine1_r4","ngIf","AddressDetailDialogComponent_ng_template_0_span_1_Template","countryCode_r5","AddressDetailDialogComponent_ng_template_0_Template","tmp_0_0","tmp_1_0","addressForm","get","value","AddressDetailDialogComponent_ng_template_2_Template","_r7","ctx_r6","ctx_r8","save","valid","touched","AddressCardComponent_div_0_span_3_Template","address_r1","streetLine1","AddressCardComponent_div_0_vdr_chip_6_Template","AddressCardComponent_div_0_vdr_chip_7_Template","AddressCardComponent_div_0_ng_container_14_Template","_r8","ctx_r7","editAddress","ctx_r9","setAsDefaultShippingAddress","ctx_r10","setAsDefaultBillingAddress","ctx_r11","delete","ctx_r5","isDefaultShipping","isDefaultBilling","AddressCardComponent_div_0_Template","countryCode","editable","SelectCustomerGroupDialogComponent_ng_template_0_Template","SelectCustomerGroupDialogComponent_ng_template_3_Template","restoredCtx","item_r4","clear_r5","clear","SelectCustomerGroupDialogComponent_ng_template_4_Template","item_r8","SelectCustomerGroupDialogComponent_ng_template_5_Template","_r10","ctx_r3","selectedGroupIds","_c3","CustomerHistoryComponent_vdr_timeline_entry_1_Template","$event","note","addNoteToCustomer","CustomerHistoryComponent_ng_container_2_vdr_customer_history_entry_host_1_Template","expanded","entry_r5","$implicit","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_2_ng_container_4_Template","_c4","strategy","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_2_ng_template_5_Template","data","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_2_Template","_r28","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_3_ng_container_4_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_3_ng_template_5_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_3_Template","_r33","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_4_Template","input","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_5_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_6_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_7_Template","address","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_8_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_9_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_10_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_11_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_12_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_13_Template","oldEmailAddress","newEmailAddress","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_14_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_15_Template","_r47","ctx_r45","updateNote","emit","ctx_r48","deleteNote","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_16_vdr_history_entry_detail_4_Template","CustomerHistoryComponent_ng_container_2_ng_template_2_ng_container_16_Template","type","CustomerHistoryComponent_ng_container_2_ng_template_2_Template","getDisplayType","getTimelineIcon","getName","isFeatured","CUSTOMER_REGISTERED","CUSTOMER_VERIFIED","CUSTOMER_DETAIL_UPDATED","CUSTOMER_ADDED_TO_GROUP","CUSTOMER_REMOVED_FROM_GROUP","CUSTOMER_ADDRESS_CREATED","CUSTOMER_ADDRESS_UPDATED","CUSTOMER_ADDRESS_DELETED","CUSTOMER_PASSWORD_UPDATED","CUSTOMER_PASSWORD_RESET_REQUESTED","CUSTOMER_PASSWORD_RESET_VERIFIED","CUSTOMER_EMAIL_UPDATE_REQUESTED","CUSTOMER_EMAIL_UPDATE_VERIFIED","CUSTOMER_NOTE","CustomerHistoryComponent_ng_container_2_Template","hasCustomComponent","CustomerDetailComponent_button_5_Template","create","addressDefaultsUpdated","detailForm","dirty","CustomerDetailComponent_ng_template_7_button_0_Template","_r13","ctx_r12","CustomerDetailComponent_ng_template_7_Template","CustomerDetailComponent_vdr_card_11_vdr_labeled_data_2_Template","lastLogin_r16","CustomerDetailComponent_vdr_card_11_Template","customer_r14","lastLogin","CustomerDetailComponent_vdr_card_13_div_2_vdr_chip_1_Template","_r25","group_r23","ctx_r24","removeFromGroup","CustomerDetailComponent_vdr_card_13_div_2_Template","groups_r17","CustomerDetailComponent_vdr_card_13_ng_template_3_Template","CustomerDetailComponent_vdr_card_13_button_6_Template","ctx_r27","addToGroup","CustomerDetailComponent_vdr_card_13_Template","_r19","CustomerDetailComponent_vdr_page_entity_info_16_Template","entity_r29","CustomerDetailComponent_vdr_form_field_43_Template","CustomerDetailComponent_vdr_card_45_Template","customFields","_c5","CustomerDetailComponent_ng_container_47_vdr_address_card_4_Template","_r43","ctx_r42","setDefaultBillingAddressId","ctx_r44","setDefaultShippingAddressId","toggleDeleteAddress","addressForm_r41","ctx_r30","addressesToDeleteIds","has","availableCountries$","defaultBillingAddressId","defaultShippingAddressId","addressCustomFields","CustomerDetailComponent_ng_container_47_button_5_Template","ctx_r46","addAddress","CustomerDetailComponent_ng_container_47_ng_template_14_Template","order_r48","CustomerDetailComponent_ng_container_47_ng_template_17_Template","order_r49","_c6","CustomerDetailComponent_ng_container_47_ng_template_20_Template","order_r50","code","CustomerDetailComponent_ng_container_47_ng_template_23_Template","order_r51","CustomerDetailComponent_ng_container_47_ng_template_26_Template","order_r52","state","CustomerDetailComponent_ng_container_47_ng_template_29_Template","order_r53","totalWithTax","currencyCode","CustomerDetailComponent_ng_container_47_ng_template_32_Template","order_r54","updatedAt","CustomerDetailComponent_ng_container_47_ng_template_35_Template","order_r55","orderPlacedAt","CustomerDetailComponent_ng_container_47_vdr_dt2_custom_field_column_36_Template","customField_r56","CustomerDetailComponent_ng_container_47_Template","_r58","ctx_r57","setOrderItemsPerPage","ctx_r59","setOrderCurrentPage","ctx_r60","ctx_r61","ctx_r62","getAddressFormControls","orders$","ordersPerPage","ordersCount$","currentOrdersPage","entity$","history$","CustomerGroupDetailComponent_button_5_Template","_r6","CustomerGroupDetailComponent_ng_template_7_button_0_Template","_r9","CustomerGroupDetailComponent_ng_template_7_Template","CustomerGroupDetailComponent_vdr_card_12_Template","entity_r10","CustomerGroupDetailComponent_vdr_card_20_Template","CustomerGroupDetailDialogComponent_ng_template_0_span_0_Template","CustomerGroupDetailDialogComponent_ng_template_0_span_1_Template","CustomerGroupDetailDialogComponent_ng_template_0_Template","CustomerGroupDetailDialogComponent_section_6_Template","form","CustomerGroupDetailDialogComponent_ng_template_7_span_4_Template","CustomerGroupDetailDialogComponent_ng_template_7_span_5_Template","CustomerGroupDetailDialogComponent_ng_template_7_Template","_c7","_c8","CustomerGroupListComponent_a_5_Template","CustomerGroupListComponent_ng_template_8_ng_template_11_Template","customerGroup_r8","CustomerGroupListComponent_ng_template_8_ng_template_14_Template","customerGroup_r9","CustomerGroupListComponent_ng_template_8_ng_template_17_Template","customerGroup_r10","_c9","CustomerGroupListComponent_ng_template_8_ng_template_20_Template","customerGroup_r11","_c10","contents","CustomerGroupListComponent_ng_template_8_ng_template_23_Template","customerGroup_r12","CustomerGroupListComponent_ng_template_8_Template","_r14","ctx_r13","setPageNumber","ctx_r15","setItemsPerPage","items$","itemsPerPage$","totalItems$","currentPage$","filters","activeIndex$","selectionManager","searchTermControl","sorts","CustomerGroupListComponent_ng_template_9_ng_container_0_Template","activeGroup_r17","ctx_r18","ctx_r20","fetchGroupMembers$","next","ctx_r16","members$","route","membersTotal$","activeGroup$","CustomerGroupListComponent_ng_template_9_Template","_c11","CustomerListComponent_a_5_Template","CustomerListComponent_ng_template_16_Template","CustomerListComponent_ng_template_19_Template","CustomerListComponent_ng_template_22_Template","CustomerListComponent_ng_template_25_Template","CustomerListComponent_ng_template_28_Template","customer_r12","CustomerListComponent_ng_template_31_Template","customer_r13","CustomerListComponent_vdr_dt2_custom_field_column_32_Template","field_r14","CustomerStatusLabelComponent","static","this","ɵfac","t","ɵcmp","selectors","inputs","decls","vars","consts","template","dependencies","i3","i3$1","i1","i4","styles","changeDetection","CustomerGroupMemberListComponent","constructor","router","dataService","selectedMemberIds","selectionChange","EventEmitter","fetchParamsChange","filterTermControl","FormControl","SelectionManager","multiSelect","itemsAreEqual","a","b","additiveMode","refresh$","BehaviorSubject","destroy$","Subject","ngOnInit","membersCurrentPage$","paramMap","pipe","map","qpm","page","startWith","distinctUntilChanged","membersItemsPerPage$","perPage","filterTerm$","valueChanges","debounceTime","tap","setContentsPageNumber","combineLatest","takeUntil","currentPage","itemsPerPage","filterTerm","take","skip","setCurrentItems","members","filter","m","includes","selectionChanges$","selection","s","ngOnDestroy","complete","setParam","setContentsItemsPerPage","refresh","key","navigate","snapshot","params","n","relativeTo","queryParamsHandling","i2","locationId","totalItems","activeGroup","outputs","AddCustomerToGroupDialogComponent","customerResult$","switchMap","getCustomerList","mapStream","res","customers","customers$","items","customersTotal$","resolveWith","AddressDetailDialogComponent","changeDetector","availableCountries","markForCheck","i1$1","AddressCardComponent","modalService","setAsDefaultShipping","setAsDefaultBilling","deleteAddress","dataDependenciesPopulated","ngOnChanges","changes","getCountryName","match","find","c","markAsDirty","fromComponent","locals","size","closable","features","SelectCustomerGroupDialogComponent","groups$","getCustomerGroupList","customerGroups","i3$2","CustomerHistoryEntryHostComponent","historyEntryComponentService","expandClick","componentType","getComponent","entry","componentRef","portalRef","createComponent","instance","destroy","viewQuery","ViewContainerRef","_t","first","exportAs","getIconShape","encapsulation","CustomerHistoryComponent","addNote","HistoryEntryType","administrator","history","CUSTOMER_DETAIL_QUERY","gql","CUSTOMER_FRAGMENT","CustomerDetailComponent","TypedBaseDetailComponent","formBuilder","notificationService","super","getCustomFieldConfig","Validators","required","phoneNumber","email","password","getCustomFieldsDefaults","addresses","UntypedFormArray","fetchHistory","Set","orderListUpdates$","init","settings","getAvailableCountries","mapSingle","result","countries","shareReplay","customerWithUpdates$","orders","getCustomerHistory","sort","SortOrder","DESC","controls","addressFormArray","newAddress","fullName","company","streetLine2","city","province","postalCode","defaultShippingAddress","defaultBillingAddress","reduce","hash","field","push","fetchOrdersList","customerForm","createCustomer","__typename","success","marker","entity","notify","message","translationVars","duration","markAsPristine","error","mergeMap","saveOperations","formValue","updateCustomer","addressControl","deleteCustomerAddress","updateCustomerAddress","createCustomerAddress","forkJoin","notified","refreshCustomer","err","groupIds","EMPTY","concatMap","groupId","addCustomersToGroup","customerCount","dialog","buttons","label","returnValue","response","removeCustomersFromGroup","EditNoteDialogComponent","displayPrivacyControls","updateCustomerNote","noteId","body","deleteCustomerNote","setFormValues","customerGroup","patchValue","addressesArray","rest","addressGroup","country","setControl","setCustomFieldFormValues","query","CustomerDetailQueryDocument","orderListOptions","single$","notNullOrUndefined","_r1","tmp_3_0","isNew$","groups","CUSTOMER_GROUP_DETAIL_QUERY","CustomerGroupDetailComponent","formvalue","createCustomerGroup","customerIds","updateCustomerGroup","CustomerGroupDetailDialogComponent","serverConfigService","getCustomFieldsFor","customFieldsGroup","fieldDef","control","deleteCustomerGroupsBulkAction","createBulkDeleteAction","location","requiresPermission","userPermissions","Permission","DeleteCustomerGroup","getItemName","bulkDelete","ids","deleteCustomerGroups","GET_CUSTOMER_GROUP_LIST","CUSTOMER_GROUP_FRAGMENT","CustomerGroupListComponent","TypedBaseListComponent","createFilterCollection","addIdFilter","addDateFilters","addFilter","kind","filterField","connectToRoute","createSortCollection","defaultSort","addSort","refreshActiveGroupMembers$","undefined","configure","document","GetCustomerGroupListDocument","getItems","setVariables","options","contains","createFilterInput","createSortInput","refreshListOnChanges","activeGroupId$","pm","listIsEmpty$","activeGroupId","g","findIndex","membersResult$","getCustomerGroupWithCustomers","of","closeMembers","verticalAlign","mapTo","tmp_2_0","removeCustomerGroupMembersBulkAction","icon","iconClass","UpdateCustomerGroup","onClick","injector","hostComponent","clearSelection","ModalService","DataService","NotificationService","deleteCustomersBulkAction","DeleteCustomer","deleteCustomers","CUSTOMER_LIST_QUERY","CustomerListComponent","addCustomFieldFilters","addCustomFieldSorts","CustomerListQueryDocument","filterOperator","LogicalOperator","OR","AND","createRoutes","pageService","path","component","PageComponent","breadcrumb","children","getPageTabRoutes","link","customerBreadcrumb","detailBreadcrumb","breadcrumbKey","CustomerModule","hasRegisteredTabsAndBulkActions","bulkActionRegistryService","registerBulkAction","registerPageTab","priority","tab","detailComponentWithResolver","entityKey","variables","getBreadcrumbs","GetCustomerGroupDetailDocument","ɵmod","ɵinj","providers","provide","ROUTES","useFactory","multi","deps","PageService","imports","SharedModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["../node_modules/rxjs/dist/esm/internal/util/argsOrArgArray.js","../node_modules/rxjs/dist/esm/internal/operators/merge.js","../node_modules/@vendure/admin-ui/fesm2022/vendure-admin-ui-customer.mjs"],"sourcesContent":["const { isArray } = Array;\nexport function argsOrArgArray(args) {\n    return args.length === 1 && isArray(args[0]) ? args[0] : args;\n}\n","import { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mergeAll } from './mergeAll';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from '../observable/from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    args = argsOrArgArray(args);\n    return operate((source, subscriber) => {\n        mergeAll(concurrent)(from([source, ...args], scheduler)).subscribe(subscriber);\n    });\n}\n","import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, EventEmitter, Output, ViewContainerRef, ViewChild, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject, combineLatest, forkJoin, from, EMPTY, of } from 'rxjs';\nimport { map, startWith, distinctUntilChanged, debounceTime, tap, takeUntil, switchMap, filter, take, shareReplay, merge, mergeMap, concatMap, mapTo } from 'rxjs/operators';\nimport * as i1 from '@vendure/admin-ui/core';\nimport { SelectionManager, HistoryEntryType, CUSTOMER_FRAGMENT, TypedBaseDetailComponent, getCustomFieldsDefaults, SortOrder, EditNoteDialogComponent, CustomerDetailQueryDocument, createBulkDeleteAction, Permission, CUSTOMER_GROUP_FRAGMENT, TypedBaseListComponent, GetCustomerGroupListDocument, ModalService, DataService, NotificationService, CustomerListQueryDocument, LogicalOperator, PageComponent, detailBreadcrumb, detailComponentWithResolver, GetCustomerGroupDetailDocument, SharedModule, PageService } from '@vendure/admin-ui/core';\nimport * as i1$1 from '@angular/forms';\nimport { FormControl, Validators, UntypedFormArray } from '@angular/forms';\nimport * as i2 from '@angular/router';\nimport { ROUTES, RouterModule } from '@angular/router';\nimport * as i3 from '@clr/angular';\nimport * as i3$1 from '@angular/common';\nimport * as i4 from '@ngx-translate/core';\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { gql } from 'apollo-angular';\nimport * as i3$2 from '@ng-select/ng-select';\n\nclass CustomerStatusLabelComponent {\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerStatusLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: CustomerStatusLabelComponent, selector: \"vdr-customer-status-label\", inputs: { customer: \"customer\" }, ngImport: i0, template: \"<vdr-chip *ngIf=\\\"customer.user?.id\\\">\\r\\n    <ng-container *ngIf=\\\"customer.user?.verified\\\">\\r\\n        <clr-icon shape=\\\"check-circle\\\" class=\\\"verified-user-icon\\\"></clr-icon>\\r\\n        {{ 'customer.verified' | translate }}\\r\\n    </ng-container>\\r\\n    <ng-container *ngIf=\\\"!customer.user?.verified\\\">\\r\\n        <clr-icon shape=\\\"check-circle\\\" class=\\\"registered-user-icon\\\"></clr-icon>\\r\\n        {{ 'customer.registered' | translate }}\\r\\n    </ng-container>\\r\\n</vdr-chip>\\r\\n<vdr-chip *ngIf=\\\"!customer.user?.id\\\">{{ 'customer.guest' | translate }}</vdr-chip>\\r\\n\", styles: [\".registered-user-icon{color:var(--color-grey-300)}.verified-user-icon{color:var(--color-success-500)}\\n\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i1.ChipComponent, selector: \"vdr-chip\", inputs: [\"icon\", \"invert\", \"colorFrom\", \"colorType\"], outputs: [\"iconClick\"] }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerStatusLabelComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-customer-status-label', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<vdr-chip *ngIf=\\\"customer.user?.id\\\">\\r\\n    <ng-container *ngIf=\\\"customer.user?.verified\\\">\\r\\n        <clr-icon shape=\\\"check-circle\\\" class=\\\"verified-user-icon\\\"></clr-icon>\\r\\n        {{ 'customer.verified' | translate }}\\r\\n    </ng-container>\\r\\n    <ng-container *ngIf=\\\"!customer.user?.verified\\\">\\r\\n        <clr-icon shape=\\\"check-circle\\\" class=\\\"registered-user-icon\\\"></clr-icon>\\r\\n        {{ 'customer.registered' | translate }}\\r\\n    </ng-container>\\r\\n</vdr-chip>\\r\\n<vdr-chip *ngIf=\\\"!customer.user?.id\\\">{{ 'customer.guest' | translate }}</vdr-chip>\\r\\n\", styles: [\".registered-user-icon{color:var(--color-grey-300)}.verified-user-icon{color:var(--color-success-500)}\\n\"] }]\r\n        }], propDecorators: { customer: [{\r\n                type: Input\r\n            }] } });\n\nclass CustomerGroupMemberListComponent {\r\n    constructor(router, dataService) {\r\n        this.router = router;\r\n        this.dataService = dataService;\r\n        this.selectedMemberIds = [];\r\n        this.selectionChange = new EventEmitter();\r\n        this.fetchParamsChange = new EventEmitter();\r\n        this.filterTermControl = new FormControl('');\r\n        this.selectionManager = new SelectionManager({\r\n            multiSelect: true,\r\n            itemsAreEqual: (a, b) => a.id === b.id,\r\n            additiveMode: true,\r\n        });\r\n        this.refresh$ = new BehaviorSubject(true);\r\n        this.destroy$ = new Subject();\r\n    }\r\n    ngOnInit() {\r\n        this.membersCurrentPage$ = this.route.paramMap.pipe(map(qpm => qpm.get('membersPage')), map(page => (!page ? 1 : +page)), startWith(1), distinctUntilChanged());\r\n        this.membersItemsPerPage$ = this.route.paramMap.pipe(map(qpm => qpm.get('membersPerPage')), map(perPage => (!perPage ? 10 : +perPage)), startWith(10), distinctUntilChanged());\r\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(debounceTime(250), tap(() => this.setContentsPageNumber(1)), startWith(''));\r\n        combineLatest(this.membersCurrentPage$, this.membersItemsPerPage$, filterTerm$, this.refresh$)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(([currentPage, itemsPerPage, filterTerm]) => {\r\n            const take = itemsPerPage;\r\n            const skip = (currentPage - 1) * itemsPerPage;\r\n            this.fetchParamsChange.emit({\r\n                filterTerm: filterTerm ?? '',\r\n                skip,\r\n                take,\r\n            });\r\n        });\r\n        this.selectionManager.setCurrentItems(this.members?.filter(m => this.selectedMemberIds.includes(m.id)) ?? []);\r\n        this.selectionManager.selectionChanges$.pipe(takeUntil(this.destroy$)).subscribe(selection => {\r\n            this.selectionChange.emit(selection.map(s => s.id));\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n    setContentsPageNumber(page) {\r\n        this.setParam('membersPage', page);\r\n    }\r\n    setContentsItemsPerPage(perPage) {\r\n        this.setParam('membersPerPage', perPage);\r\n    }\r\n    refresh() {\r\n        this.refresh$.next(true);\r\n    }\r\n    setParam(key, value) {\r\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\r\n            relativeTo: this.route,\r\n            queryParamsHandling: 'merge',\r\n        });\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerGroupMemberListComponent, deps: [{ token: i2.Router }, { token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: CustomerGroupMemberListComponent, selector: \"vdr-customer-group-member-list\", inputs: { locationId: \"locationId\", members: \"members\", totalItems: \"totalItems\", route: \"route\", selectedMemberIds: \"selectedMemberIds\", activeGroup: \"activeGroup\" }, outputs: { selectionChange: \"selectionChange\", fetchParamsChange: \"fetchParamsChange\" }, ngImport: i0, template: \"<vdr-data-table-2\\r\\n    [id]=\\\"locationId\\\"\\r\\n    [items]=\\\"members\\\"\\r\\n    [itemsPerPage]=\\\"membersItemsPerPage$ | async\\\"\\r\\n    [totalItems]=\\\"totalItems\\\"\\r\\n    [currentPage]=\\\"membersCurrentPage$ | async\\\"\\r\\n    (pageChange)=\\\"setContentsPageNumber($event)\\\"\\r\\n    (itemsPerPageChange)=\\\"setContentsItemsPerPage($event)\\\"\\r\\n>\\r\\n    <vdr-bulk-action-menu\\r\\n        [locationId]=\\\"locationId\\\"\\r\\n        [hostComponent]=\\\"this\\\"\\r\\n        [selectionManager]=\\\"selectionManager\\\"\\r\\n    ></vdr-bulk-action-menu>\\r\\n    <vdr-dt2-search\\r\\n        [searchTermControl]=\\\"filterTermControl\\\"\\r\\n        [searchTermPlaceholder]=\\\"'customer.search-customers-by-email' | translate\\\"\\r\\n    ></vdr-dt2-search>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customerGroup=\\\"item\\\">\\r\\n            {{ customerGroup.id }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.created-at' | translate\\\" id=\\\"created-at\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.createdAt | localeDate : 'short' }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.updated-at' | translate\\\" id=\\\"updated-at\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.createdAt | localeDate : 'short' }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'customer.name' | translate\\\" id=\\\"name\\\" [optional]=\\\"false\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            <a class=\\\"button-ghost\\\" [routerLink]=\\\"['/customer/customers', customer.id]\\\"\\r\\n                ><span> {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }} </span>\\r\\n                <clr-icon shape=\\\"arrow right\\\"></clr-icon>\\r\\n            </a>\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.status' | translate\\\" id=\\\"status\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            <vdr-customer-status-label [customer]=\\\"customer\\\" />\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'customer.email-address' | translate\\\" id=\\\"email-address\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.emailAddress }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n</vdr-data-table-2>\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i2.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"component\", type: i1.BulkActionMenuComponent, selector: \"vdr-bulk-action-menu\", inputs: [\"locationId\", \"selectionManager\", \"hostComponent\"] }, { kind: \"component\", type: i1.DataTable2Component, selector: \"vdr-data-table-2\", inputs: [\"id\", \"items\", \"itemsPerPage\", \"currentPage\", \"totalItems\", \"emptyStateLabel\", \"filters\", \"activeIndex\"], outputs: [\"pageChange\", \"itemsPerPageChange\"] }, { kind: \"component\", type: i1.DataTable2ColumnComponent, selector: \"vdr-dt2-column\", inputs: [\"id\", \"expand\", \"heading\", \"align\", \"sort\", \"optional\", \"hiddenByDefault\", \"orderable\"], exportAs: [\"row\"] }, { kind: \"component\", type: i1.DataTable2SearchComponent, selector: \"vdr-dt2-search\", inputs: [\"searchTermControl\", \"searchTermPlaceholder\"] }, { kind: \"component\", type: CustomerStatusLabelComponent, selector: \"vdr-customer-status-label\", inputs: [\"customer\"] }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }, { kind: \"pipe\", type: i1.LocaleDatePipe, name: \"localeDate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerGroupMemberListComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-customer-group-member-list', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<vdr-data-table-2\\r\\n    [id]=\\\"locationId\\\"\\r\\n    [items]=\\\"members\\\"\\r\\n    [itemsPerPage]=\\\"membersItemsPerPage$ | async\\\"\\r\\n    [totalItems]=\\\"totalItems\\\"\\r\\n    [currentPage]=\\\"membersCurrentPage$ | async\\\"\\r\\n    (pageChange)=\\\"setContentsPageNumber($event)\\\"\\r\\n    (itemsPerPageChange)=\\\"setContentsItemsPerPage($event)\\\"\\r\\n>\\r\\n    <vdr-bulk-action-menu\\r\\n        [locationId]=\\\"locationId\\\"\\r\\n        [hostComponent]=\\\"this\\\"\\r\\n        [selectionManager]=\\\"selectionManager\\\"\\r\\n    ></vdr-bulk-action-menu>\\r\\n    <vdr-dt2-search\\r\\n        [searchTermControl]=\\\"filterTermControl\\\"\\r\\n        [searchTermPlaceholder]=\\\"'customer.search-customers-by-email' | translate\\\"\\r\\n    ></vdr-dt2-search>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customerGroup=\\\"item\\\">\\r\\n            {{ customerGroup.id }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.created-at' | translate\\\" id=\\\"created-at\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.createdAt | localeDate : 'short' }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.updated-at' | translate\\\" id=\\\"updated-at\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.createdAt | localeDate : 'short' }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'customer.name' | translate\\\" id=\\\"name\\\" [optional]=\\\"false\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            <a class=\\\"button-ghost\\\" [routerLink]=\\\"['/customer/customers', customer.id]\\\"\\r\\n                ><span> {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }} </span>\\r\\n                <clr-icon shape=\\\"arrow right\\\"></clr-icon>\\r\\n            </a>\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.status' | translate\\\" id=\\\"status\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            <vdr-customer-status-label [customer]=\\\"customer\\\" />\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'customer.email-address' | translate\\\" id=\\\"email-address\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.emailAddress }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n</vdr-data-table-2>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: i2.Router }, { type: i1.DataService }]; }, propDecorators: { locationId: [{\r\n                type: Input\r\n            }], members: [{\r\n                type: Input\r\n            }], totalItems: [{\r\n                type: Input\r\n            }], route: [{\r\n                type: Input\r\n            }], selectedMemberIds: [{\r\n                type: Input\r\n            }], activeGroup: [{\r\n                type: Input\r\n            }], selectionChange: [{\r\n                type: Output\r\n            }], fetchParamsChange: [{\r\n                type: Output\r\n            }] } });\n\nclass AddCustomerToGroupDialogComponent {\r\n    constructor(dataService) {\r\n        this.dataService = dataService;\r\n        this.selectedCustomerIds = [];\r\n        this.fetchGroupMembers$ = new BehaviorSubject({\r\n            skip: 0,\r\n            take: 10,\r\n            filterTerm: '',\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        const customerResult$ = this.fetchGroupMembers$.pipe(switchMap(({ skip, take, filterTerm }) => this.dataService.customer\r\n            .getCustomerList(take, skip, filterTerm)\r\n            .mapStream(res => res.customers)));\r\n        this.customers$ = customerResult$.pipe(map(res => res.items));\r\n        this.customersTotal$ = customerResult$.pipe(map(res => res.totalItems));\r\n    }\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n    add() {\r\n        this.resolveWith(this.selectedCustomerIds);\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: AddCustomerToGroupDialogComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: AddCustomerToGroupDialogComponent, selector: \"vdr-add-customer-to-group-dialog\", ngImport: i0, template: \"<ng-template vdrDialogTitle>\\r\\n    {{ 'customer.add-customers-to-group-with-name' | translate: {groupName: group.name} }}\\r\\n</ng-template>\\r\\n\\r\\n<vdr-customer-group-member-list\\r\\n    locationId=\\\"customer-group-members-picker-list\\\"\\r\\n    [members]=\\\"customers$ | async\\\"\\r\\n    [totalItems]=\\\"customersTotal$ | async\\\"\\r\\n    [route]=\\\"route\\\"\\r\\n    [selectedMemberIds]=\\\"selectedCustomerIds\\\"\\r\\n    (fetchParamsChange)=\\\"fetchGroupMembers$.next($event)\\\"\\r\\n    (selectionChange)=\\\"selectedCustomerIds = $event\\\"\\r\\n/>\\r\\n\\r\\n<ng-template vdrDialogButtons>\\r\\n    <button type=\\\"button\\\" class=\\\"btn\\\" (click)=\\\"cancel()\\\">{{ 'common.cancel' | translate }}</button>\\r\\n    <button type=\\\"submit\\\" (click)=\\\"add()\\\" [disabled]=\\\"!selectedCustomerIds.length\\\" class=\\\"btn btn-primary\\\">\\r\\n        {{ 'customer.add-customers-to-group-with-count' | translate: {count: selectedCustomerIds.length} }}\\r\\n    </button>\\r\\n</ng-template>\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i1.DialogButtonsDirective, selector: \"[vdrDialogButtons]\" }, { kind: \"directive\", type: i1.DialogTitleDirective, selector: \"[vdrDialogTitle]\" }, { kind: \"component\", type: CustomerGroupMemberListComponent, selector: \"vdr-customer-group-member-list\", inputs: [\"locationId\", \"members\", \"totalItems\", \"route\", \"selectedMemberIds\", \"activeGroup\"], outputs: [\"selectionChange\", \"fetchParamsChange\"] }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: AddCustomerToGroupDialogComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-add-customer-to-group-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-template vdrDialogTitle>\\r\\n    {{ 'customer.add-customers-to-group-with-name' | translate: {groupName: group.name} }}\\r\\n</ng-template>\\r\\n\\r\\n<vdr-customer-group-member-list\\r\\n    locationId=\\\"customer-group-members-picker-list\\\"\\r\\n    [members]=\\\"customers$ | async\\\"\\r\\n    [totalItems]=\\\"customersTotal$ | async\\\"\\r\\n    [route]=\\\"route\\\"\\r\\n    [selectedMemberIds]=\\\"selectedCustomerIds\\\"\\r\\n    (fetchParamsChange)=\\\"fetchGroupMembers$.next($event)\\\"\\r\\n    (selectionChange)=\\\"selectedCustomerIds = $event\\\"\\r\\n/>\\r\\n\\r\\n<ng-template vdrDialogButtons>\\r\\n    <button type=\\\"button\\\" class=\\\"btn\\\" (click)=\\\"cancel()\\\">{{ 'common.cancel' | translate }}</button>\\r\\n    <button type=\\\"submit\\\" (click)=\\\"add()\\\" [disabled]=\\\"!selectedCustomerIds.length\\\" class=\\\"btn btn-primary\\\">\\r\\n        {{ 'customer.add-customers-to-group-with-count' | translate: {count: selectedCustomerIds.length} }}\\r\\n    </button>\\r\\n</ng-template>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: i1.DataService }]; } });\n\nclass AddressDetailDialogComponent {\r\n    constructor(changeDetector) {\r\n        this.changeDetector = changeDetector;\r\n        this.availableCountries = [];\r\n    }\r\n    ngOnInit() {\r\n        this.addressForm.valueChanges.subscribe(() => this.changeDetector.markForCheck());\r\n    }\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n    save() {\r\n        this.resolveWith(this.addressForm);\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: AddressDetailDialogComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: AddressDetailDialogComponent, selector: \"vdr-address-detail-dialog\", ngImport: i0, template: \"<ng-template vdrDialogTitle>\\r\\n    <span *ngIf=\\\"addressForm.get('streetLine1')?.value as streetLine1\\\">{{ streetLine1 }},</span>\\r\\n    <span *ngIf=\\\"addressForm.get('countryCode')?.value as countryCode\\\"> {{ countryCode }}</span>\\r\\n</ng-template>\\r\\n\\r\\n<vdr-address-form\\r\\n    [formGroup]=\\\"addressForm\\\"\\r\\n    [availableCountries]=\\\"availableCountries\\\"\\r\\n    [customFields]=\\\"customFields\\\"\\r\\n></vdr-address-form>\\r\\n\\r\\n<ng-template vdrDialogButtons>\\r\\n    <button type=\\\"button\\\" class=\\\"btn\\\" (click)=\\\"cancel()\\\">{{ 'common.cancel' | translate }}</button>\\r\\n    <button\\r\\n        type=\\\"submit\\\"\\r\\n        (click)=\\\"save()\\\"\\r\\n        [disabled]=\\\"!addressForm.valid || !addressForm.touched\\\"\\r\\n        class=\\\"btn btn-primary\\\"\\r\\n    >\\r\\n        {{ 'common.update' | translate }}\\r\\n    </button>\\r\\n</ng-template>\\r\\n\", styles: [\"clr-input-container{margin-bottom:12px}\\n\"], dependencies: [{ kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1.DialogButtonsDirective, selector: \"[vdrDialogButtons]\" }, { kind: \"directive\", type: i1.DialogTitleDirective, selector: \"[vdrDialogTitle]\" }, { kind: \"component\", type: i1.AddressFormComponent, selector: \"vdr-address-form\", inputs: [\"customFields\", \"formGroup\", \"availableCountries\"] }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: AddressDetailDialogComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-address-detail-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-template vdrDialogTitle>\\r\\n    <span *ngIf=\\\"addressForm.get('streetLine1')?.value as streetLine1\\\">{{ streetLine1 }},</span>\\r\\n    <span *ngIf=\\\"addressForm.get('countryCode')?.value as countryCode\\\"> {{ countryCode }}</span>\\r\\n</ng-template>\\r\\n\\r\\n<vdr-address-form\\r\\n    [formGroup]=\\\"addressForm\\\"\\r\\n    [availableCountries]=\\\"availableCountries\\\"\\r\\n    [customFields]=\\\"customFields\\\"\\r\\n></vdr-address-form>\\r\\n\\r\\n<ng-template vdrDialogButtons>\\r\\n    <button type=\\\"button\\\" class=\\\"btn\\\" (click)=\\\"cancel()\\\">{{ 'common.cancel' | translate }}</button>\\r\\n    <button\\r\\n        type=\\\"submit\\\"\\r\\n        (click)=\\\"save()\\\"\\r\\n        [disabled]=\\\"!addressForm.valid || !addressForm.touched\\\"\\r\\n        class=\\\"btn btn-primary\\\"\\r\\n    >\\r\\n        {{ 'common.update' | translate }}\\r\\n    </button>\\r\\n</ng-template>\\r\\n\", styles: [\"clr-input-container{margin-bottom:12px}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; } });\n\nclass AddressCardComponent {\r\n    constructor(modalService, changeDetector) {\r\n        this.modalService = modalService;\r\n        this.changeDetector = changeDetector;\r\n        this.availableCountries = [];\r\n        this.editable = true;\r\n        this.setAsDefaultShipping = new EventEmitter();\r\n        this.setAsDefaultBilling = new EventEmitter();\r\n        this.deleteAddress = new EventEmitter();\r\n        this.dataDependenciesPopulated = new BehaviorSubject(false);\r\n    }\r\n    ngOnInit() {\r\n        const streetLine1 = this.addressForm.get('streetLine1');\r\n        // Make the address dialog display automatically if there is no address line\r\n        // as is the case when adding a new address.\r\n        if (!streetLine1.value) {\r\n            this.dataDependenciesPopulated\r\n                .pipe(filter(value => value), take(1))\r\n                .subscribe(() => {\r\n                this.editAddress();\r\n            });\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (this.customFields != null && this.availableCountries != null) {\r\n            this.dataDependenciesPopulated.next(true);\r\n        }\r\n    }\r\n    getCountryName(countryCode) {\r\n        if (!this.availableCountries) {\r\n            return '';\r\n        }\r\n        const match = this.availableCountries.find(c => c.code === countryCode);\r\n        return match ? match.name : '';\r\n    }\r\n    setAsDefaultBillingAddress() {\r\n        this.setAsDefaultBilling.emit(this.addressForm.value.id);\r\n        this.addressForm.markAsDirty();\r\n    }\r\n    setAsDefaultShippingAddress() {\r\n        this.setAsDefaultShipping.emit(this.addressForm.value.id);\r\n        this.addressForm.markAsDirty();\r\n    }\r\n    delete() {\r\n        this.deleteAddress.emit(this.addressForm.value.id);\r\n        this.addressForm.markAsDirty();\r\n    }\r\n    editAddress() {\r\n        this.modalService\r\n            .fromComponent(AddressDetailDialogComponent, {\r\n            locals: {\r\n                addressForm: this.addressForm,\r\n                customFields: this.customFields,\r\n                availableCountries: this.availableCountries,\r\n            },\r\n            size: 'md',\r\n            closable: true,\r\n        })\r\n            .subscribe(() => {\r\n            this.changeDetector.markForCheck();\r\n        });\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: AddressCardComponent, deps: [{ token: i1.ModalService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: AddressCardComponent, selector: \"vdr-address-card\", inputs: { addressForm: \"addressForm\", customFields: \"customFields\", availableCountries: \"availableCountries\", isDefaultBilling: \"isDefaultBilling\", isDefaultShipping: \"isDefaultShipping\", editable: \"editable\" }, outputs: { setAsDefaultShipping: \"setAsDefaultShipping\", setAsDefaultBilling: \"setAsDefaultBilling\", deleteAddress: \"deleteAddress\" }, usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"card\\\" *ngIf=\\\"addressForm.value as address\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n        <div class=\\\"address-title\\\">\\r\\n            <span class=\\\"street-line\\\" *ngIf=\\\"address.streetLine1\\\">{{ address.streetLine1 }},</span>\\r\\n            {{ address.countryCode }}\\r\\n        </div>\\r\\n        <div class=\\\"default-controls\\\">\\r\\n            <vdr-chip class=\\\"is-default p8\\\" *ngIf=\\\"isDefaultShipping\\\">\\r\\n                <clr-icon shape=\\\"truck\\\"></clr-icon>\\r\\n                {{ 'customer.default-shipping-address' | translate }}\\r\\n            </vdr-chip>\\r\\n            <vdr-chip class=\\\"is-default p8\\\" *ngIf=\\\"isDefaultBilling\\\">\\r\\n                <clr-icon shape=\\\"credit-card\\\"></clr-icon>\\r\\n                {{ 'customer.default-billing-address' | translate }}\\r\\n            </vdr-chip>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"card-block\\\">\\r\\n        <div class=\\\"card-text\\\">\\r\\n            <vdr-formatted-address [address]=\\\"address\\\"></vdr-formatted-address>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"card-footer\\\">\\r\\n        <div class=\\\"address-actions\\\">\\r\\n            <vdr-entity-info [entity]=\\\"address\\\"></vdr-entity-info>\\r\\n            <ng-container *ngIf=\\\"editable\\\">\\r\\n                <button class=\\\"button-small\\\" (click)=\\\"editAddress()\\\">\\r\\n                    {{ 'common.edit' | translate }}\\r\\n                </button>\\r\\n                <vdr-dropdown>\\r\\n                    <button type=\\\"button\\\" class=\\\"button-small\\\" vdrDropdownTrigger>\\r\\n                        {{ 'common.more' | translate }}\\r\\n                        <clr-icon shape=\\\"ellipsis-vertical\\\" size=\\\"12\\\"></clr-icon>\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu>\\r\\n                        <button\\r\\n                            vdrDropdownItem\\r\\n                            [disabled]=\\\"isDefaultShipping\\\"\\r\\n                            (click)=\\\"setAsDefaultShippingAddress()\\\"\\r\\n                        >\\r\\n                            {{ 'customer.set-as-default-shipping-address' | translate }}\\r\\n                        </button>\\r\\n                        <button\\r\\n                            vdrDropdownItem\\r\\n                            [disabled]=\\\"isDefaultBilling\\\"\\r\\n                            (click)=\\\"setAsDefaultBillingAddress()\\\"\\r\\n                        >\\r\\n                            {{ 'customer.set-as-default-billing-address' | translate }}\\r\\n                        </button>\\r\\n                        <div class=\\\"dropdown-divider\\\"></div>\\r\\n                        <button type=\\\"button\\\" (click)=\\\"delete()\\\" vdrDropdownItem>\\r\\n                            <clr-icon shape=\\\"trash\\\" class=\\\"is-danger\\\"></clr-icon>\\r\\n                            {{ 'common.delete' | translate }}\\r\\n                        </button>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n            </ng-container>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\":host{display:block;max-width:360px}clr-input-container{margin-bottom:12px}.defaul-controls{display:flex}.is-default{margin:0;color:var(--color-success-500)}.address-actions{display:flex;align-items:center;gap:var(--space-unit)}.address-actions vdr-entity-info{margin-top:1px}\\n\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i1.ChipComponent, selector: \"vdr-chip\", inputs: [\"icon\", \"invert\", \"colorFrom\", \"colorType\"], outputs: [\"iconClick\"] }, { kind: \"component\", type: i1.DropdownComponent, selector: \"vdr-dropdown\", inputs: [\"manualToggle\"] }, { kind: \"component\", type: i1.DropdownMenuComponent, selector: \"vdr-dropdown-menu\", inputs: [\"vdrPosition\", \"customClasses\"] }, { kind: \"directive\", type: i1.DropdownTriggerDirective, selector: \"[vdrDropdownTrigger]\" }, { kind: \"directive\", type: i1.DropdownItemDirective, selector: \"[vdrDropdownItem]\" }, { kind: \"component\", type: i1.FormattedAddressComponent, selector: \"vdr-formatted-address\", inputs: [\"address\"] }, { kind: \"component\", type: i1.EntityInfoComponent, selector: \"vdr-entity-info\", inputs: [\"small\", \"entity\"] }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: AddressCardComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-address-card', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"card\\\" *ngIf=\\\"addressForm.value as address\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n        <div class=\\\"address-title\\\">\\r\\n            <span class=\\\"street-line\\\" *ngIf=\\\"address.streetLine1\\\">{{ address.streetLine1 }},</span>\\r\\n            {{ address.countryCode }}\\r\\n        </div>\\r\\n        <div class=\\\"default-controls\\\">\\r\\n            <vdr-chip class=\\\"is-default p8\\\" *ngIf=\\\"isDefaultShipping\\\">\\r\\n                <clr-icon shape=\\\"truck\\\"></clr-icon>\\r\\n                {{ 'customer.default-shipping-address' | translate }}\\r\\n            </vdr-chip>\\r\\n            <vdr-chip class=\\\"is-default p8\\\" *ngIf=\\\"isDefaultBilling\\\">\\r\\n                <clr-icon shape=\\\"credit-card\\\"></clr-icon>\\r\\n                {{ 'customer.default-billing-address' | translate }}\\r\\n            </vdr-chip>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"card-block\\\">\\r\\n        <div class=\\\"card-text\\\">\\r\\n            <vdr-formatted-address [address]=\\\"address\\\"></vdr-formatted-address>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"card-footer\\\">\\r\\n        <div class=\\\"address-actions\\\">\\r\\n            <vdr-entity-info [entity]=\\\"address\\\"></vdr-entity-info>\\r\\n            <ng-container *ngIf=\\\"editable\\\">\\r\\n                <button class=\\\"button-small\\\" (click)=\\\"editAddress()\\\">\\r\\n                    {{ 'common.edit' | translate }}\\r\\n                </button>\\r\\n                <vdr-dropdown>\\r\\n                    <button type=\\\"button\\\" class=\\\"button-small\\\" vdrDropdownTrigger>\\r\\n                        {{ 'common.more' | translate }}\\r\\n                        <clr-icon shape=\\\"ellipsis-vertical\\\" size=\\\"12\\\"></clr-icon>\\r\\n                    </button>\\r\\n                    <vdr-dropdown-menu>\\r\\n                        <button\\r\\n                            vdrDropdownItem\\r\\n                            [disabled]=\\\"isDefaultShipping\\\"\\r\\n                            (click)=\\\"setAsDefaultShippingAddress()\\\"\\r\\n                        >\\r\\n                            {{ 'customer.set-as-default-shipping-address' | translate }}\\r\\n                        </button>\\r\\n                        <button\\r\\n                            vdrDropdownItem\\r\\n                            [disabled]=\\\"isDefaultBilling\\\"\\r\\n                            (click)=\\\"setAsDefaultBillingAddress()\\\"\\r\\n                        >\\r\\n                            {{ 'customer.set-as-default-billing-address' | translate }}\\r\\n                        </button>\\r\\n                        <div class=\\\"dropdown-divider\\\"></div>\\r\\n                        <button type=\\\"button\\\" (click)=\\\"delete()\\\" vdrDropdownItem>\\r\\n                            <clr-icon shape=\\\"trash\\\" class=\\\"is-danger\\\"></clr-icon>\\r\\n                            {{ 'common.delete' | translate }}\\r\\n                        </button>\\r\\n                    </vdr-dropdown-menu>\\r\\n                </vdr-dropdown>\\r\\n            </ng-container>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\":host{display:block;max-width:360px}clr-input-container{margin-bottom:12px}.defaul-controls{display:flex}.is-default{margin:0;color:var(--color-success-500)}.address-actions{display:flex;align-items:center;gap:var(--space-unit)}.address-actions vdr-entity-info{margin-top:1px}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1.ModalService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { addressForm: [{\r\n                type: Input\r\n            }], customFields: [{\r\n                type: Input\r\n            }], availableCountries: [{\r\n                type: Input\r\n            }], isDefaultBilling: [{\r\n                type: Input\r\n            }], isDefaultShipping: [{\r\n                type: Input\r\n            }], editable: [{\r\n                type: Input\r\n            }], setAsDefaultShipping: [{\r\n                type: Output\r\n            }], setAsDefaultBilling: [{\r\n                type: Output\r\n            }], deleteAddress: [{\r\n                type: Output\r\n            }] } });\n\nclass SelectCustomerGroupDialogComponent {\r\n    constructor(dataService) {\r\n        this.dataService = dataService;\r\n        this.selectedGroupIds = [];\r\n    }\r\n    ngOnInit() {\r\n        this.groups$ = this.dataService.customer\r\n            .getCustomerGroupList()\r\n            .mapStream(res => res.customerGroups.items);\r\n    }\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n    add() {\r\n        this.resolveWith(this.selectedGroupIds);\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: SelectCustomerGroupDialogComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: SelectCustomerGroupDialogComponent, selector: \"vdr-select-customer-group-dialog\", ngImport: i0, template: \"<ng-template vdrDialogTitle>\\r\\n    {{ 'customer.add-customer-to-group' | translate }}\\r\\n</ng-template>\\r\\n\\r\\n<ng-select\\r\\n    [items]=\\\"groups$ | async\\\"\\r\\n    appendTo=\\\"body\\\"\\r\\n    [addTag]=\\\"false\\\"\\r\\n    [multiple]=\\\"true\\\"\\r\\n    bindValue=\\\"id\\\"\\r\\n    [(ngModel)]=\\\"selectedGroupIds\\\"\\r\\n    [clearable]=\\\"true\\\"\\r\\n    [searchable]=\\\"false\\\"\\r\\n>\\r\\n    <ng-template ng-label-tmp let-item=\\\"item\\\" let-clear=\\\"clear\\\">\\r\\n        <span aria-hidden=\\\"true\\\" class=\\\"ng-value-icon left\\\" (click)=\\\"clear(item)\\\"> \\u00D7 </span>\\r\\n        <vdr-chip [colorFrom]=\\\"item.id\\\">{{ item.name }}</vdr-chip>\\r\\n    </ng-template>\\r\\n    <ng-template ng-option-tmp let-item=\\\"item\\\">\\r\\n        <vdr-chip [colorFrom]=\\\"item.id\\\">{{ item.name }}</vdr-chip>\\r\\n    </ng-template>\\r\\n</ng-select>\\r\\n\\r\\n\\r\\n<ng-template vdrDialogButtons>\\r\\n    <button type=\\\"button\\\" class=\\\"btn\\\" (click)=\\\"cancel()\\\">{{ 'common.cancel' | translate }}</button>\\r\\n    <button type=\\\"submit\\\" (click)=\\\"add()\\\" [disabled]=\\\"!selectedGroupIds.length\\\" class=\\\"btn btn-primary\\\">\\r\\n        {{ 'customer.add-customer-to-groups-with-count' | translate: {count: selectedGroupIds.length} }}\\r\\n    </button>\\r\\n</ng-template>\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i1$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1$1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i3$2.NgSelectComponent, selector: \"ng-select\", inputs: [\"bindLabel\", \"bindValue\", \"markFirst\", \"placeholder\", \"notFoundText\", \"typeToSearchText\", \"addTagText\", \"loadingText\", \"clearAllText\", \"appearance\", \"dropdownPosition\", \"appendTo\", \"loading\", \"closeOnSelect\", \"hideSelected\", \"selectOnTab\", \"openOnEnter\", \"maxSelectedItems\", \"groupBy\", \"groupValue\", \"bufferAmount\", \"virtualScroll\", \"selectableGroup\", \"selectableGroupAsModel\", \"searchFn\", \"trackByFn\", \"clearOnBackspace\", \"labelForId\", \"inputAttrs\", \"tabIndex\", \"readonly\", \"searchWhileComposing\", \"minTermLength\", \"editableSearchTerm\", \"keyDownFn\", \"typeahead\", \"multiple\", \"addTag\", \"searchable\", \"clearable\", \"isOpen\", \"items\", \"compareWith\", \"clearSearchOnAdd\", \"deselectOnClick\"], outputs: [\"blur\", \"focus\", \"change\", \"open\", \"close\", \"search\", \"clear\", \"add\", \"remove\", \"scroll\", \"scrollToEnd\"] }, { kind: \"directive\", type: i3$2.NgOptionTemplateDirective, selector: \"[ng-option-tmp]\" }, { kind: \"directive\", type: i3$2.NgLabelTemplateDirective, selector: \"[ng-label-tmp]\" }, { kind: \"component\", type: i1.ChipComponent, selector: \"vdr-chip\", inputs: [\"icon\", \"invert\", \"colorFrom\", \"colorType\"], outputs: [\"iconClick\"] }, { kind: \"directive\", type: i1.DialogButtonsDirective, selector: \"[vdrDialogButtons]\" }, { kind: \"directive\", type: i1.DialogTitleDirective, selector: \"[vdrDialogTitle]\" }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: SelectCustomerGroupDialogComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-select-customer-group-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-template vdrDialogTitle>\\r\\n    {{ 'customer.add-customer-to-group' | translate }}\\r\\n</ng-template>\\r\\n\\r\\n<ng-select\\r\\n    [items]=\\\"groups$ | async\\\"\\r\\n    appendTo=\\\"body\\\"\\r\\n    [addTag]=\\\"false\\\"\\r\\n    [multiple]=\\\"true\\\"\\r\\n    bindValue=\\\"id\\\"\\r\\n    [(ngModel)]=\\\"selectedGroupIds\\\"\\r\\n    [clearable]=\\\"true\\\"\\r\\n    [searchable]=\\\"false\\\"\\r\\n>\\r\\n    <ng-template ng-label-tmp let-item=\\\"item\\\" let-clear=\\\"clear\\\">\\r\\n        <span aria-hidden=\\\"true\\\" class=\\\"ng-value-icon left\\\" (click)=\\\"clear(item)\\\"> \\u00D7 </span>\\r\\n        <vdr-chip [colorFrom]=\\\"item.id\\\">{{ item.name }}</vdr-chip>\\r\\n    </ng-template>\\r\\n    <ng-template ng-option-tmp let-item=\\\"item\\\">\\r\\n        <vdr-chip [colorFrom]=\\\"item.id\\\">{{ item.name }}</vdr-chip>\\r\\n    </ng-template>\\r\\n</ng-select>\\r\\n\\r\\n\\r\\n<ng-template vdrDialogButtons>\\r\\n    <button type=\\\"button\\\" class=\\\"btn\\\" (click)=\\\"cancel()\\\">{{ 'common.cancel' | translate }}</button>\\r\\n    <button type=\\\"submit\\\" (click)=\\\"add()\\\" [disabled]=\\\"!selectedGroupIds.length\\\" class=\\\"btn btn-primary\\\">\\r\\n        {{ 'customer.add-customer-to-groups-with-count' | translate: {count: selectedGroupIds.length} }}\\r\\n    </button>\\r\\n</ng-template>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: i1.DataService }]; } });\n\nclass CustomerHistoryEntryHostComponent {\r\n    constructor(historyEntryComponentService) {\r\n        this.historyEntryComponentService = historyEntryComponentService;\r\n        this.expandClick = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        const componentType = this.historyEntryComponentService.getComponent(this.entry.type);\r\n        const componentRef = this.portalRef.createComponent(componentType);\r\n        componentRef.instance.entry = this.entry;\r\n        componentRef.instance.customer = this.customer;\r\n        this.instance = componentRef.instance;\r\n        this.componentRef = componentRef;\r\n    }\r\n    ngOnDestroy() {\r\n        this.componentRef?.destroy();\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerHistoryEntryHostComponent, deps: [{ token: i1.HistoryEntryComponentService }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: CustomerHistoryEntryHostComponent, selector: \"vdr-customer-history-entry-host\", inputs: { entry: \"entry\", customer: \"customer\", expanded: \"expanded\" }, outputs: { expandClick: \"expandClick\" }, viewQueries: [{ propertyName: \"portalRef\", first: true, predicate: [\"portal\"], descendants: true, read: ViewContainerRef, static: true }], exportAs: [\"historyEntry\"], ngImport: i0, template: ` <vdr-timeline-entry\r\n        [displayType]=\"instance.getDisplayType(entry)\"\r\n        [iconShape]=\"instance.getIconShape && instance.getIconShape(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"instance.getName && instance.getName(entry)\"\r\n        [featured]=\"instance.isFeatured(entry)\"\r\n        [collapsed]=\"!expanded && !instance.isFeatured(entry)\"\r\n        (expandClick)=\"expandClick.emit()\"\r\n    >\r\n        <div #portal></div>\r\n    </vdr-timeline-entry>`, isInline: true, dependencies: [{ kind: \"component\", type: i1.TimelineEntryComponent, selector: \"vdr-timeline-entry\", inputs: [\"displayType\", \"createdAt\", \"name\", \"featured\", \"iconShape\", \"isLast\", \"collapsed\"], outputs: [\"expandClick\"] }] }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerHistoryEntryHostComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'vdr-customer-history-entry-host',\r\n                    template: ` <vdr-timeline-entry\r\n        [displayType]=\"instance.getDisplayType(entry)\"\r\n        [iconShape]=\"instance.getIconShape && instance.getIconShape(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"instance.getName && instance.getName(entry)\"\r\n        [featured]=\"instance.isFeatured(entry)\"\r\n        [collapsed]=\"!expanded && !instance.isFeatured(entry)\"\r\n        (expandClick)=\"expandClick.emit()\"\r\n    >\r\n        <div #portal></div>\r\n    </vdr-timeline-entry>`,\r\n                    exportAs: 'historyEntry',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.HistoryEntryComponentService }]; }, propDecorators: { entry: [{\r\n                type: Input\r\n            }], customer: [{\r\n                type: Input\r\n            }], expanded: [{\r\n                type: Input\r\n            }], expandClick: [{\r\n                type: Output\r\n            }], portalRef: [{\r\n                type: ViewChild,\r\n                args: ['portal', { static: true, read: ViewContainerRef }]\r\n            }] } });\n\nclass CustomerHistoryComponent {\r\n    constructor(historyEntryComponentService) {\r\n        this.historyEntryComponentService = historyEntryComponentService;\r\n        this.addNote = new EventEmitter();\r\n        this.updateNote = new EventEmitter();\r\n        this.deleteNote = new EventEmitter();\r\n        this.note = '';\r\n        this.expanded = false;\r\n        this.type = HistoryEntryType;\r\n    }\r\n    hasCustomComponent(type) {\r\n        return !!this.historyEntryComponentService.getComponent(type);\r\n    }\r\n    getDisplayType(entry) {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n            case HistoryEntryType.CUSTOMER_EMAIL_UPDATE_VERIFIED:\r\n            case HistoryEntryType.CUSTOMER_PASSWORD_RESET_VERIFIED:\r\n                return 'success';\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n                return 'muted';\r\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\r\n                return 'error';\r\n            default:\r\n                return 'default';\r\n        }\r\n    }\r\n    getTimelineIcon(entry) {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n                return 'user';\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n                return ['assign-user', 'is-solid'];\r\n            case HistoryEntryType.CUSTOMER_NOTE:\r\n                return 'note';\r\n            case HistoryEntryType.CUSTOMER_ADDED_TO_GROUP:\r\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\r\n                return 'users';\r\n        }\r\n    }\r\n    isFeatured(entry) {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    getName(entry) {\r\n        const { administrator } = entry;\r\n        if (administrator) {\r\n            return `${administrator.firstName} ${administrator.lastName}`;\r\n        }\r\n        else {\r\n            return `${this.customer.firstName} ${this.customer.lastName}`;\r\n        }\r\n    }\r\n    addNoteToCustomer() {\r\n        this.addNote.emit({ note: this.note });\r\n        this.note = '';\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerHistoryComponent, deps: [{ token: i1.HistoryEntryComponentService }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: CustomerHistoryComponent, selector: \"vdr-customer-history\", inputs: { customer: \"customer\", history: \"history\" }, outputs: { addNote: \"addNote\", updateNote: \"updateNote\", deleteNote: \"deleteNote\" }, ngImport: i0, template: \"<div class=\\\"entry-list\\\">\\r\\n    <vdr-timeline-entry iconShape=\\\"note\\\" displayType=\\\"muted\\\" *vdrIfPermissions=\\\"'UpdateCustomer'\\\">\\r\\n        <div class=\\\"note-entry\\\">\\r\\n            <textarea [(ngModel)]=\\\"note\\\" name=\\\"note\\\" class=\\\"note\\\"></textarea>\\r\\n            <button class=\\\"btn btn-secondary\\\" [disabled]=\\\"!note\\\" (click)=\\\"addNoteToCustomer()\\\">\\r\\n                {{ 'order.add-note' | translate }}\\r\\n            </button>\\r\\n        </div>\\r\\n    </vdr-timeline-entry>\\r\\n    <ng-container *ngFor=\\\"let entry of history\\\">\\r\\n        <vdr-customer-history-entry-host\\r\\n            *ngIf=\\\"hasCustomComponent(entry.type); else defaultComponents\\\"\\r\\n            [customer]=\\\"customer\\\"\\r\\n            [entry]=\\\"entry\\\"\\r\\n            [expanded]=\\\"expanded\\\"\\r\\n            (expandClick)=\\\"expanded = !expanded\\\"\\r\\n        ></vdr-customer-history-entry-host>\\r\\n        <ng-template #defaultComponents>\\r\\n            <vdr-timeline-entry\\r\\n                [displayType]=\\\"getDisplayType(entry)\\\"\\r\\n                [iconShape]=\\\"getTimelineIcon(entry)\\\"\\r\\n                [createdAt]=\\\"entry.createdAt\\\"\\r\\n                [name]=\\\"getName(entry)\\\"\\r\\n                [featured]=\\\"isFeatured(entry)\\\"\\r\\n            >\\r\\n                <ng-container [ngSwitch]=\\\"entry.type\\\">\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_REGISTERED\\\">\\r\\n                        <div class=\\\"title\\\">\\r\\n                            {{ 'customer.history-customer-registered' | translate }}\\r\\n                        </div>\\r\\n                        <ng-container *ngIf=\\\"entry.data.strategy === 'native'; else namedStrategy\\\">\\r\\n                            {{ 'customer.history-using-native-auth-strategy' | translate }}\\r\\n                        </ng-container>\\r\\n                        <ng-template #namedStrategy>\\r\\n                            {{\\r\\n                                'customer.history-using-external-auth-strategy'\\r\\n                                    | translate: { strategy: entry.data.strategy }\\r\\n                            }}\\r\\n                        </ng-template>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_VERIFIED\\\">\\r\\n                        <div class=\\\"title\\\">\\r\\n                            {{ 'customer.history-customer-verified' | translate }}\\r\\n                        </div>\\r\\n                        <ng-container *ngIf=\\\"entry.data.strategy === 'native'; else namedStrategy\\\">\\r\\n                            {{ 'customer.history-using-native-auth-strategy' | translate }}\\r\\n                        </ng-container>\\r\\n                        <ng-template #namedStrategy>\\r\\n                            {{\\r\\n                                'customer.history-using-external-auth-strategy'\\r\\n                                    | translate: { strategy: entry.data.strategy }\\r\\n                            }}\\r\\n                        </ng-template>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_DETAIL_UPDATED\\\">\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            {{ 'customer.history-customer-detail-updated' | translate }}\\r\\n                            <vdr-history-entry-detail>\\r\\n                                <vdr-object-tree [value]=\\\"entry.data.input\\\"></vdr-object-tree>\\r\\n                            </vdr-history-entry-detail>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_ADDED_TO_GROUP\\\">\\r\\n                        {{\\r\\n                            'customer.history-customer-added-to-group'\\r\\n                                | translate: { groupName: entry.data.groupName }\\r\\n                        }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_REMOVED_FROM_GROUP\\\">\\r\\n                        {{\\r\\n                            'customer.history-customer-removed-from-group'\\r\\n                                | translate: { groupName: entry.data.groupName }\\r\\n                        }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_ADDRESS_CREATED\\\">\\r\\n                        {{ 'customer.history-customer-address-created' | translate }}\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            <div class=\\\"address-string\\\">{{ entry.data.address }}</div>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_ADDRESS_UPDATED\\\">\\r\\n                        {{ 'customer.history-customer-address-updated' | translate }}\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            <div class=\\\"address-string\\\">{{ entry.data.address }}</div>\\r\\n                            <vdr-history-entry-detail>\\r\\n                                <vdr-object-tree [value]=\\\"entry.data.input\\\"></vdr-object-tree>\\r\\n                            </vdr-history-entry-detail>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_ADDRESS_DELETED\\\">\\r\\n                        {{ 'customer.history-customer-address-deleted' | translate }}\\r\\n                        <div class=\\\"address-string\\\">{{ entry.data.address }}</div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_PASSWORD_UPDATED\\\">\\r\\n                        {{ 'customer.history-customer-password-updated' | translate }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_PASSWORD_RESET_REQUESTED\\\">\\r\\n                        {{ 'customer.history-customer-password-reset-requested' | translate }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_PASSWORD_RESET_VERIFIED\\\">\\r\\n                        {{ 'customer.history-customer-password-reset-verified' | translate }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_EMAIL_UPDATE_REQUESTED\\\">\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            {{ 'customer.history-customer-email-update-requested' | translate }}\\r\\n                            <vdr-history-entry-detail>\\r\\n                                <vdr-labeled-data [label]=\\\"'customer.old-email-address' | translate\\\">{{\\r\\n                                    entry.data.oldEmailAddress\\r\\n                                }}</vdr-labeled-data>\\r\\n                                <vdr-labeled-data [label]=\\\"'customer.new-email-address' | translate\\\">{{\\r\\n                                    entry.data.newEmailAddress\\r\\n                                }}</vdr-labeled-data>\\r\\n                            </vdr-history-entry-detail>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_EMAIL_UPDATE_VERIFIED\\\">\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            {{ 'customer.history-customer-email-update-verified' | translate }}\\r\\n                            <vdr-history-entry-detail>\\r\\n                                <vdr-labeled-data [label]=\\\"'customer.old-email-address' | translate\\\">{{\\r\\n                                    entry.data.oldEmailAddress\\r\\n                                }}</vdr-labeled-data>\\r\\n                                <vdr-labeled-data [label]=\\\"'customer.new-email-address' | translate\\\">{{\\r\\n                                    entry.data.newEmailAddress\\r\\n                                }}</vdr-labeled-data>\\r\\n                            </vdr-history-entry-detail>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_NOTE\\\">\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            <div class=\\\"note-text\\\">\\r\\n                                {{ entry.data.note }}\\r\\n                            </div>\\r\\n                            <div class=\\\"flex-spacer\\\"></div>\\r\\n                            <vdr-dropdown>\\r\\n                                <button class=\\\"icon-button\\\" vdrDropdownTrigger>\\r\\n                                    <clr-icon shape=\\\"ellipsis-vertical\\\"></clr-icon>\\r\\n                                </button>\\r\\n                                <vdr-dropdown-menu vdrPosition=\\\"bottom-right\\\">\\r\\n                                    <button\\r\\n                                        vdrDropdownItem\\r\\n                                        (click)=\\\"updateNote.emit(entry)\\\"\\r\\n                                        [disabled]=\\\"!('UpdateCustomer' | hasPermission)\\\"\\r\\n                                    >\\r\\n                                        <clr-icon shape=\\\"edit\\\"></clr-icon>\\r\\n                                        {{ 'common.edit' | translate }}\\r\\n                                    </button>\\r\\n                                    <div class=\\\"dropdown-divider\\\"></div>\\r\\n                                    <button\\r\\n                                        vdrDropdownItem\\r\\n                                        (click)=\\\"deleteNote.emit(entry)\\\"\\r\\n                                        [disabled]=\\\"!('UpdateCustomer' | hasPermission)\\\"\\r\\n                                    >\\r\\n                                        <clr-icon shape=\\\"trash\\\" class=\\\"is-danger\\\"></clr-icon>\\r\\n                                        {{ 'common.delete' | translate }}\\r\\n                                    </button>\\r\\n                                </vdr-dropdown-menu>\\r\\n                            </vdr-dropdown>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchDefault>\\r\\n                        <div class=\\\"title\\\">\\r\\n                            {{ entry.type | translate }}\\r\\n                        </div>\\r\\n                        <vdr-history-entry-detail *ngIf=\\\"entry.data\\\">\\r\\n                            <vdr-object-tree [value]=\\\"entry.data\\\"></vdr-object-tree>\\r\\n                        </vdr-history-entry-detail>\\r\\n                    </ng-container>\\r\\n                </ng-container>\\r\\n            </vdr-timeline-entry>\\r\\n        </ng-template>\\r\\n    </ng-container>\\r\\n    <vdr-timeline-entry [isLast]=\\\"true\\\"></vdr-timeline-entry>\\r\\n</div>\\r\\n\", styles: [\".entry-list{margin:24px 12px 24px 24px}.note-entry{display:flex;align-items:center}.note-entry .note{flex:1}.note-entry button{margin:0}textarea.note{flex:1;height:36px;border-radius:3px;margin-inline-end:6px}.note-text{color:var(--color-text-100);white-space:pre-wrap}.address-string{font-size:smaller;color:var(--color-text-200)}\\n\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i3$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3$1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i3$1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i3$1.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i1$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1$1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: i1.FormFieldControlDirective, selector: \"input, textarea, select\" }, { kind: \"component\", type: i1.DropdownComponent, selector: \"vdr-dropdown\", inputs: [\"manualToggle\"] }, { kind: \"component\", type: i1.DropdownMenuComponent, selector: \"vdr-dropdown-menu\", inputs: [\"vdrPosition\", \"customClasses\"] }, { kind: \"directive\", type: i1.DropdownTriggerDirective, selector: \"[vdrDropdownTrigger]\" }, { kind: \"directive\", type: i1.DropdownItemDirective, selector: \"[vdrDropdownItem]\" }, { kind: \"component\", type: i1.LabeledDataComponent, selector: \"vdr-labeled-data\", inputs: [\"label\"] }, { kind: \"component\", type: i1.ObjectTreeComponent, selector: \"vdr-object-tree\", inputs: [\"value\", \"isArrayItem\"] }, { kind: \"directive\", type: i1.IfPermissionsDirective, selector: \"[vdrIfPermissions]\", inputs: [\"vdrIfPermissions\", \"vdrIfPermissionsElse\"] }, { kind: \"component\", type: i1.TimelineEntryComponent, selector: \"vdr-timeline-entry\", inputs: [\"displayType\", \"createdAt\", \"name\", \"featured\", \"iconShape\", \"isLast\", \"collapsed\"], outputs: [\"expandClick\"] }, { kind: \"component\", type: i1.HistoryEntryDetailComponent, selector: \"vdr-history-entry-detail\" }, { kind: \"component\", type: CustomerHistoryEntryHostComponent, selector: \"vdr-customer-history-entry-host\", inputs: [\"entry\", \"customer\", \"expanded\"], outputs: [\"expandClick\"], exportAs: [\"historyEntry\"] }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }, { kind: \"pipe\", type: i1.HasPermissionPipe, name: \"hasPermission\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerHistoryComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-customer-history', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"entry-list\\\">\\r\\n    <vdr-timeline-entry iconShape=\\\"note\\\" displayType=\\\"muted\\\" *vdrIfPermissions=\\\"'UpdateCustomer'\\\">\\r\\n        <div class=\\\"note-entry\\\">\\r\\n            <textarea [(ngModel)]=\\\"note\\\" name=\\\"note\\\" class=\\\"note\\\"></textarea>\\r\\n            <button class=\\\"btn btn-secondary\\\" [disabled]=\\\"!note\\\" (click)=\\\"addNoteToCustomer()\\\">\\r\\n                {{ 'order.add-note' | translate }}\\r\\n            </button>\\r\\n        </div>\\r\\n    </vdr-timeline-entry>\\r\\n    <ng-container *ngFor=\\\"let entry of history\\\">\\r\\n        <vdr-customer-history-entry-host\\r\\n            *ngIf=\\\"hasCustomComponent(entry.type); else defaultComponents\\\"\\r\\n            [customer]=\\\"customer\\\"\\r\\n            [entry]=\\\"entry\\\"\\r\\n            [expanded]=\\\"expanded\\\"\\r\\n            (expandClick)=\\\"expanded = !expanded\\\"\\r\\n        ></vdr-customer-history-entry-host>\\r\\n        <ng-template #defaultComponents>\\r\\n            <vdr-timeline-entry\\r\\n                [displayType]=\\\"getDisplayType(entry)\\\"\\r\\n                [iconShape]=\\\"getTimelineIcon(entry)\\\"\\r\\n                [createdAt]=\\\"entry.createdAt\\\"\\r\\n                [name]=\\\"getName(entry)\\\"\\r\\n                [featured]=\\\"isFeatured(entry)\\\"\\r\\n            >\\r\\n                <ng-container [ngSwitch]=\\\"entry.type\\\">\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_REGISTERED\\\">\\r\\n                        <div class=\\\"title\\\">\\r\\n                            {{ 'customer.history-customer-registered' | translate }}\\r\\n                        </div>\\r\\n                        <ng-container *ngIf=\\\"entry.data.strategy === 'native'; else namedStrategy\\\">\\r\\n                            {{ 'customer.history-using-native-auth-strategy' | translate }}\\r\\n                        </ng-container>\\r\\n                        <ng-template #namedStrategy>\\r\\n                            {{\\r\\n                                'customer.history-using-external-auth-strategy'\\r\\n                                    | translate: { strategy: entry.data.strategy }\\r\\n                            }}\\r\\n                        </ng-template>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_VERIFIED\\\">\\r\\n                        <div class=\\\"title\\\">\\r\\n                            {{ 'customer.history-customer-verified' | translate }}\\r\\n                        </div>\\r\\n                        <ng-container *ngIf=\\\"entry.data.strategy === 'native'; else namedStrategy\\\">\\r\\n                            {{ 'customer.history-using-native-auth-strategy' | translate }}\\r\\n                        </ng-container>\\r\\n                        <ng-template #namedStrategy>\\r\\n                            {{\\r\\n                                'customer.history-using-external-auth-strategy'\\r\\n                                    | translate: { strategy: entry.data.strategy }\\r\\n                            }}\\r\\n                        </ng-template>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_DETAIL_UPDATED\\\">\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            {{ 'customer.history-customer-detail-updated' | translate }}\\r\\n                            <vdr-history-entry-detail>\\r\\n                                <vdr-object-tree [value]=\\\"entry.data.input\\\"></vdr-object-tree>\\r\\n                            </vdr-history-entry-detail>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_ADDED_TO_GROUP\\\">\\r\\n                        {{\\r\\n                            'customer.history-customer-added-to-group'\\r\\n                                | translate: { groupName: entry.data.groupName }\\r\\n                        }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_REMOVED_FROM_GROUP\\\">\\r\\n                        {{\\r\\n                            'customer.history-customer-removed-from-group'\\r\\n                                | translate: { groupName: entry.data.groupName }\\r\\n                        }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_ADDRESS_CREATED\\\">\\r\\n                        {{ 'customer.history-customer-address-created' | translate }}\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            <div class=\\\"address-string\\\">{{ entry.data.address }}</div>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_ADDRESS_UPDATED\\\">\\r\\n                        {{ 'customer.history-customer-address-updated' | translate }}\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            <div class=\\\"address-string\\\">{{ entry.data.address }}</div>\\r\\n                            <vdr-history-entry-detail>\\r\\n                                <vdr-object-tree [value]=\\\"entry.data.input\\\"></vdr-object-tree>\\r\\n                            </vdr-history-entry-detail>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_ADDRESS_DELETED\\\">\\r\\n                        {{ 'customer.history-customer-address-deleted' | translate }}\\r\\n                        <div class=\\\"address-string\\\">{{ entry.data.address }}</div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_PASSWORD_UPDATED\\\">\\r\\n                        {{ 'customer.history-customer-password-updated' | translate }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_PASSWORD_RESET_REQUESTED\\\">\\r\\n                        {{ 'customer.history-customer-password-reset-requested' | translate }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_PASSWORD_RESET_VERIFIED\\\">\\r\\n                        {{ 'customer.history-customer-password-reset-verified' | translate }}\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_EMAIL_UPDATE_REQUESTED\\\">\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            {{ 'customer.history-customer-email-update-requested' | translate }}\\r\\n                            <vdr-history-entry-detail>\\r\\n                                <vdr-labeled-data [label]=\\\"'customer.old-email-address' | translate\\\">{{\\r\\n                                    entry.data.oldEmailAddress\\r\\n                                }}</vdr-labeled-data>\\r\\n                                <vdr-labeled-data [label]=\\\"'customer.new-email-address' | translate\\\">{{\\r\\n                                    entry.data.newEmailAddress\\r\\n                                }}</vdr-labeled-data>\\r\\n                            </vdr-history-entry-detail>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_EMAIL_UPDATE_VERIFIED\\\">\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            {{ 'customer.history-customer-email-update-verified' | translate }}\\r\\n                            <vdr-history-entry-detail>\\r\\n                                <vdr-labeled-data [label]=\\\"'customer.old-email-address' | translate\\\">{{\\r\\n                                    entry.data.oldEmailAddress\\r\\n                                }}</vdr-labeled-data>\\r\\n                                <vdr-labeled-data [label]=\\\"'customer.new-email-address' | translate\\\">{{\\r\\n                                    entry.data.newEmailAddress\\r\\n                                }}</vdr-labeled-data>\\r\\n                            </vdr-history-entry-detail>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchCase=\\\"type.CUSTOMER_NOTE\\\">\\r\\n                        <div class=\\\"flex\\\">\\r\\n                            <div class=\\\"note-text\\\">\\r\\n                                {{ entry.data.note }}\\r\\n                            </div>\\r\\n                            <div class=\\\"flex-spacer\\\"></div>\\r\\n                            <vdr-dropdown>\\r\\n                                <button class=\\\"icon-button\\\" vdrDropdownTrigger>\\r\\n                                    <clr-icon shape=\\\"ellipsis-vertical\\\"></clr-icon>\\r\\n                                </button>\\r\\n                                <vdr-dropdown-menu vdrPosition=\\\"bottom-right\\\">\\r\\n                                    <button\\r\\n                                        vdrDropdownItem\\r\\n                                        (click)=\\\"updateNote.emit(entry)\\\"\\r\\n                                        [disabled]=\\\"!('UpdateCustomer' | hasPermission)\\\"\\r\\n                                    >\\r\\n                                        <clr-icon shape=\\\"edit\\\"></clr-icon>\\r\\n                                        {{ 'common.edit' | translate }}\\r\\n                                    </button>\\r\\n                                    <div class=\\\"dropdown-divider\\\"></div>\\r\\n                                    <button\\r\\n                                        vdrDropdownItem\\r\\n                                        (click)=\\\"deleteNote.emit(entry)\\\"\\r\\n                                        [disabled]=\\\"!('UpdateCustomer' | hasPermission)\\\"\\r\\n                                    >\\r\\n                                        <clr-icon shape=\\\"trash\\\" class=\\\"is-danger\\\"></clr-icon>\\r\\n                                        {{ 'common.delete' | translate }}\\r\\n                                    </button>\\r\\n                                </vdr-dropdown-menu>\\r\\n                            </vdr-dropdown>\\r\\n                        </div>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngSwitchDefault>\\r\\n                        <div class=\\\"title\\\">\\r\\n                            {{ entry.type | translate }}\\r\\n                        </div>\\r\\n                        <vdr-history-entry-detail *ngIf=\\\"entry.data\\\">\\r\\n                            <vdr-object-tree [value]=\\\"entry.data\\\"></vdr-object-tree>\\r\\n                        </vdr-history-entry-detail>\\r\\n                    </ng-container>\\r\\n                </ng-container>\\r\\n            </vdr-timeline-entry>\\r\\n        </ng-template>\\r\\n    </ng-container>\\r\\n    <vdr-timeline-entry [isLast]=\\\"true\\\"></vdr-timeline-entry>\\r\\n</div>\\r\\n\", styles: [\".entry-list{margin:24px 12px 24px 24px}.note-entry{display:flex;align-items:center}.note-entry .note{flex:1}.note-entry button{margin:0}textarea.note{flex:1;height:36px;border-radius:3px;margin-inline-end:6px}.note-text{color:var(--color-text-100);white-space:pre-wrap}.address-string{font-size:smaller;color:var(--color-text-200)}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1.HistoryEntryComponentService }]; }, propDecorators: { customer: [{\r\n                type: Input\r\n            }], history: [{\r\n                type: Input\r\n            }], addNote: [{\r\n                type: Output\r\n            }], updateNote: [{\r\n                type: Output\r\n            }], deleteNote: [{\r\n                type: Output\r\n            }] } });\n\nconst CUSTOMER_DETAIL_QUERY = gql `\r\n    query CustomerDetailQuery($id: ID!, $orderListOptions: OrderListOptions) {\r\n        customer(id: $id) {\r\n            ...Customer\r\n            groups {\r\n                id\r\n                name\r\n            }\r\n            orders(options: $orderListOptions) {\r\n                items {\r\n                    id\r\n                    code\r\n                    type\r\n                    state\r\n                    total\r\n                    totalWithTax\r\n                    currencyCode\r\n                    createdAt\r\n                    updatedAt\r\n                    orderPlacedAt\r\n                }\r\n                totalItems\r\n            }\r\n        }\r\n    }\r\n    ${CUSTOMER_FRAGMENT}\r\n`;\r\nclass CustomerDetailComponent extends TypedBaseDetailComponent {\r\n    constructor(changeDetector, formBuilder, dataService, modalService, notificationService) {\r\n        super();\r\n        this.changeDetector = changeDetector;\r\n        this.formBuilder = formBuilder;\r\n        this.dataService = dataService;\r\n        this.modalService = modalService;\r\n        this.notificationService = notificationService;\r\n        this.customFields = this.getCustomFieldConfig('Customer');\r\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\r\n        this.detailForm = this.formBuilder.group({\r\n            customer: this.formBuilder.group({\r\n                title: '',\r\n                firstName: ['', Validators.required],\r\n                lastName: ['', Validators.required],\r\n                phoneNumber: '',\r\n                emailAddress: ['', [Validators.required, Validators.email]],\r\n                password: '',\r\n                customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\r\n            }),\r\n            addresses: new UntypedFormArray([]),\r\n        });\r\n        this.fetchHistory = new Subject();\r\n        this.addressesToDeleteIds = new Set();\r\n        this.addressDefaultsUpdated = false;\r\n        this.ordersPerPage = 10;\r\n        this.currentOrdersPage = 1;\r\n        this.orderListUpdates$ = new Subject();\r\n    }\r\n    ngOnInit() {\r\n        this.init();\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items)\r\n            .pipe(shareReplay(1));\r\n        const customerWithUpdates$ = this.entity$.pipe(merge(this.orderListUpdates$));\r\n        this.orders$ = customerWithUpdates$.pipe(map(customer => customer.orders.items));\r\n        this.ordersCount$ = this.entity$.pipe(map(customer => customer.orders.totalItems));\r\n        this.history$ = this.fetchHistory.pipe(startWith(null), switchMap(() => this.dataService.customer\r\n            .getCustomerHistory(this.id, {\r\n            sort: {\r\n                createdAt: SortOrder.DESC,\r\n            },\r\n        })\r\n            .mapStream(data => data.customer?.history.items)));\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n        this.orderListUpdates$.complete();\r\n    }\r\n    getAddressFormControls() {\r\n        const formArray = this.detailForm.get(['addresses']);\r\n        return formArray.controls;\r\n    }\r\n    setDefaultBillingAddressId(id) {\r\n        this.defaultBillingAddressId = id;\r\n        this.addressDefaultsUpdated = true;\r\n    }\r\n    setDefaultShippingAddressId(id) {\r\n        this.defaultShippingAddressId = id;\r\n        this.addressDefaultsUpdated = true;\r\n    }\r\n    toggleDeleteAddress(id) {\r\n        if (this.addressesToDeleteIds.has(id)) {\r\n            this.addressesToDeleteIds.delete(id);\r\n        }\r\n        else {\r\n            this.addressesToDeleteIds.add(id);\r\n        }\r\n    }\r\n    addAddress() {\r\n        const addressFormArray = this.detailForm.get('addresses');\r\n        const newAddress = this.formBuilder.group({\r\n            fullName: '',\r\n            company: '',\r\n            streetLine1: ['', Validators.required],\r\n            streetLine2: '',\r\n            city: '',\r\n            province: '',\r\n            postalCode: '',\r\n            countryCode: ['', Validators.required],\r\n            phoneNumber: '',\r\n            defaultShippingAddress: false,\r\n            defaultBillingAddress: false,\r\n            customFields: this.formBuilder.group(this.addressCustomFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {})),\r\n        });\r\n        addressFormArray.push(newAddress);\r\n    }\r\n    setOrderItemsPerPage(itemsPerPage) {\r\n        this.ordersPerPage = +itemsPerPage;\r\n        this.fetchOrdersList();\r\n    }\r\n    setOrderCurrentPage(page) {\r\n        this.currentOrdersPage = +page;\r\n        this.fetchOrdersList();\r\n    }\r\n    create() {\r\n        const customerForm = this.detailForm.get('customer');\r\n        if (!customerForm) {\r\n            return;\r\n        }\r\n        const { title, emailAddress, firstName, lastName, phoneNumber, password } = customerForm.value;\r\n        const customFields = customerForm.get('customFields')?.value;\r\n        if (!emailAddress || !firstName || !lastName) {\r\n            return;\r\n        }\r\n        const customer = {\r\n            title,\r\n            emailAddress,\r\n            firstName,\r\n            lastName,\r\n            phoneNumber,\r\n            customFields,\r\n        };\r\n        this.dataService.customer.createCustomer(customer, password).subscribe(({ createCustomer }) => {\r\n            switch (createCustomer.__typename) {\r\n                case 'Customer':\r\n                    this.notificationService.success(marker('common.notify-create-success'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                    if (createCustomer.emailAddress && !password) {\r\n                        this.notificationService.notify({\r\n                            message: marker('customer.email-verification-sent'),\r\n                            translationVars: { emailAddress },\r\n                            type: 'info',\r\n                            duration: 10000,\r\n                        });\r\n                    }\r\n                    this.detailForm.markAsPristine();\r\n                    this.addressDefaultsUpdated = false;\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', createCustomer.id], { relativeTo: this.route });\r\n                    break;\r\n                case 'EmailAddressConflictError':\r\n                    this.notificationService.error(createCustomer.message);\r\n            }\r\n        });\r\n    }\r\n    save() {\r\n        this.entity$\r\n            .pipe(take(1), mergeMap(({ id }) => {\r\n            const saveOperations = [];\r\n            const customerForm = this.detailForm.get('customer');\r\n            if (customerForm && customerForm.dirty) {\r\n                const formValue = customerForm.value;\r\n                const customFields = customerForm.get('customFields')?.value;\r\n                const customer = {\r\n                    id,\r\n                    title: formValue.title,\r\n                    emailAddress: formValue.emailAddress,\r\n                    firstName: formValue.firstName,\r\n                    lastName: formValue.lastName,\r\n                    phoneNumber: formValue.phoneNumber,\r\n                    customFields,\r\n                };\r\n                saveOperations.push(this.dataService.customer\r\n                    .updateCustomer(customer)\r\n                    .pipe(map(res => res.updateCustomer)));\r\n            }\r\n            const addressFormArray = this.detailForm.get('addresses');\r\n            if ((addressFormArray && addressFormArray.dirty) || this.addressDefaultsUpdated) {\r\n                for (const addressControl of addressFormArray.controls) {\r\n                    if (addressControl.dirty || this.addressDefaultsUpdated) {\r\n                        const address = addressControl.value;\r\n                        const input = {\r\n                            fullName: address.fullName,\r\n                            company: address.company,\r\n                            streetLine1: address.streetLine1,\r\n                            streetLine2: address.streetLine2,\r\n                            city: address.city,\r\n                            province: address.province,\r\n                            postalCode: address.postalCode,\r\n                            countryCode: address.countryCode,\r\n                            phoneNumber: address.phoneNumber,\r\n                            defaultShippingAddress: this.defaultShippingAddressId === address.id,\r\n                            defaultBillingAddress: this.defaultBillingAddressId === address.id,\r\n                            customFields: address.customFields,\r\n                        };\r\n                        if (!address.id) {\r\n                            saveOperations.push(this.dataService.customer\r\n                                .createCustomerAddress(id, input)\r\n                                .pipe(map(res => res.createCustomerAddress)));\r\n                        }\r\n                        else {\r\n                            if (this.addressesToDeleteIds.has(address.id)) {\r\n                                saveOperations.push(this.dataService.customer\r\n                                    .deleteCustomerAddress(address.id)\r\n                                    .pipe(map(res => res.deleteCustomerAddress)));\r\n                            }\r\n                            else {\r\n                                saveOperations.push(this.dataService.customer\r\n                                    .updateCustomerAddress({\r\n                                    ...input,\r\n                                    id: address.id,\r\n                                })\r\n                                    .pipe(map(res => res.updateCustomerAddress)));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return forkJoin(saveOperations);\r\n        }))\r\n            .subscribe(data => {\r\n            let notified = false;\r\n            for (const result of data) {\r\n                switch (result.__typename) {\r\n                    case 'Customer':\r\n                    case 'Address':\r\n                    case 'Success':\r\n                        if (!notified) {\r\n                            this.notificationService.success(marker('common.notify-update-success'), {\r\n                                entity: 'Customer',\r\n                            });\r\n                            notified = true;\r\n                            this.detailForm.markAsPristine();\r\n                            this.addressDefaultsUpdated = false;\r\n                            this.changeDetector.markForCheck();\r\n                            this.fetchHistory.next();\r\n                            this.refreshCustomer().subscribe();\r\n                        }\r\n                        break;\r\n                    case 'EmailAddressConflictError':\r\n                        this.notificationService.error(result.message);\r\n                        break;\r\n                }\r\n            }\r\n        }, err => {\r\n            this.notificationService.error(marker('common.notify-update-error'), {\r\n                entity: 'Customer',\r\n            });\r\n        });\r\n    }\r\n    addToGroup() {\r\n        this.modalService\r\n            .fromComponent(SelectCustomerGroupDialogComponent, {\r\n            size: 'md',\r\n        })\r\n            .pipe(switchMap(groupIds => (groupIds ? from(groupIds) : EMPTY)), concatMap(groupId => this.dataService.customer.addCustomersToGroup(groupId, [this.id])))\r\n            .subscribe({\r\n            next: res => {\r\n                this.notificationService.success(marker(`customer.add-customers-to-group-success`), {\r\n                    customerCount: 1,\r\n                    groupName: res.addCustomersToGroup.name,\r\n                });\r\n            },\r\n            complete: () => {\r\n                this.refreshCustomer().subscribe();\r\n                this.fetchHistory.next();\r\n            },\r\n        });\r\n    }\r\n    removeFromGroup(group) {\r\n        this.modalService\r\n            .dialog({\r\n            title: marker('customer.confirm-remove-customer-from-group'),\r\n            buttons: [\r\n                { type: 'secondary', label: marker('common.cancel') },\r\n                { type: 'danger', label: marker('common.delete'), returnValue: true },\r\n            ],\r\n        })\r\n            .pipe(switchMap(response => response\r\n            ? this.dataService.customer.removeCustomersFromGroup(group.id, [this.id])\r\n            : EMPTY), switchMap(() => this.refreshCustomer()))\r\n            .subscribe(result => {\r\n            this.notificationService.success(marker(`customer.remove-customers-from-group-success`), {\r\n                customerCount: 1,\r\n                groupName: group.name,\r\n            });\r\n            this.fetchHistory.next();\r\n        });\r\n    }\r\n    addNoteToCustomer({ note }) {\r\n        this.dataService.customer.addNoteToCustomer(this.id, note).subscribe(() => {\r\n            this.fetchHistory.next();\r\n            this.notificationService.success(marker('common.notify-create-success'), {\r\n                entity: 'Note',\r\n            });\r\n        });\r\n    }\r\n    updateNote(entry) {\r\n        this.modalService\r\n            .fromComponent(EditNoteDialogComponent, {\r\n            closable: true,\r\n            locals: {\r\n                displayPrivacyControls: false,\r\n                note: entry.data.note,\r\n            },\r\n        })\r\n            .pipe(switchMap(result => {\r\n            if (result) {\r\n                return this.dataService.customer.updateCustomerNote({\r\n                    noteId: entry.id,\r\n                    note: result.note,\r\n                });\r\n            }\r\n            else {\r\n                return EMPTY;\r\n            }\r\n        }))\r\n            .subscribe(result => {\r\n            this.fetchHistory.next();\r\n            this.notificationService.success(marker('common.notify-update-success'), {\r\n                entity: 'Note',\r\n            });\r\n        });\r\n    }\r\n    deleteNote(entry) {\r\n        return this.modalService\r\n            .dialog({\r\n            title: marker('common.confirm-delete-note'),\r\n            body: entry.data.note,\r\n            buttons: [\r\n                { type: 'secondary', label: marker('common.cancel') },\r\n                { type: 'danger', label: marker('common.delete'), returnValue: true },\r\n            ],\r\n        })\r\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomerNote(entry.id) : EMPTY)))\r\n            .subscribe(() => {\r\n            this.fetchHistory.next();\r\n            this.notificationService.success(marker('common.notify-delete-success'), {\r\n                entity: 'Note',\r\n            });\r\n        });\r\n    }\r\n    setFormValues(entity) {\r\n        const customerGroup = this.detailForm.get('customer');\r\n        if (customerGroup) {\r\n            customerGroup.patchValue({\r\n                title: entity.title ?? null,\r\n                firstName: entity.firstName,\r\n                lastName: entity.lastName,\r\n                phoneNumber: entity.phoneNumber ?? null,\r\n                emailAddress: entity.emailAddress,\r\n                password: '',\r\n                customFields: {},\r\n            });\r\n        }\r\n        if (entity.addresses) {\r\n            const addressesArray = new UntypedFormArray([]);\r\n            for (const address of entity.addresses) {\r\n                const { customFields, ...rest } = address;\r\n                const addressGroup = this.formBuilder.group({\r\n                    ...rest,\r\n                    countryCode: address.country.code,\r\n                    customFields: this.formBuilder.group(this.addressCustomFields.reduce((hash, field) => ({\r\n                        ...hash,\r\n                        [field.name]: address['customFields'][field.name],\r\n                    }), {})),\r\n                });\r\n                addressesArray.push(addressGroup);\r\n                if (address.defaultShippingAddress) {\r\n                    this.defaultShippingAddressId = address.id;\r\n                }\r\n                if (address.defaultBillingAddress) {\r\n                    this.defaultBillingAddressId = address.id;\r\n                }\r\n            }\r\n            this.detailForm.setControl('addresses', addressesArray);\r\n        }\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customer', 'customFields']), entity);\r\n        }\r\n        this.changeDetector.markForCheck();\r\n    }\r\n    /**\r\n     * Refetch the customer with the current order list settings.\r\n     */\r\n    fetchOrdersList() {\r\n        this.dataService\r\n            .query(CustomerDetailQueryDocument, {\r\n            id: this.id,\r\n            orderListOptions: {\r\n                take: this.ordersPerPage,\r\n                skip: (this.currentOrdersPage - 1) * this.ordersPerPage,\r\n                sort: { orderPlacedAt: SortOrder.DESC },\r\n            },\r\n        })\r\n            .single$.pipe(map(data => data.customer), filter(notNullOrUndefined))\r\n            .subscribe(result => this.orderListUpdates$.next(result));\r\n    }\r\n    refreshCustomer() {\r\n        return this.dataService.query(CustomerDetailQueryDocument, {\r\n            id: this.id,\r\n            orderListOptions: { take: 0 },\r\n        }).single$;\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$1.FormBuilder }, { token: i1.DataService }, { token: i1.ModalService }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: CustomerDetailComponent, selector: \"vdr-customer-detail\", usesInheritance: true, ngImport: i0, template: \"<vdr-page-block>\\r\\n    <vdr-action-bar>\\r\\n        <vdr-ab-left> </vdr-ab-left>\\r\\n\\r\\n        <vdr-ab-right>\\r\\n            <vdr-action-bar-items locationId=\\\"customer-detail\\\"></vdr-action-bar-items>\\r\\n            <button\\r\\n                class=\\\"btn btn-primary\\\"\\r\\n                *ngIf=\\\"isNew$ | async; else updateButton\\\"\\r\\n                (click)=\\\"create()\\\"\\r\\n                [disabled]=\\\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\\\"\\r\\n            >\\r\\n                {{ 'common.create' | translate }}\\r\\n            </button>\\r\\n            <ng-template #updateButton>\\r\\n                <button\\r\\n                    *vdrIfPermissions=\\\"'UpdateCustomer'\\\"\\r\\n                    class=\\\"btn btn-primary\\\"\\r\\n                    (click)=\\\"save()\\\"\\r\\n                    [disabled]=\\\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\\\"\\r\\n                >\\r\\n                    {{ 'common.update' | translate }}\\r\\n                </button>\\r\\n            </ng-template>\\r\\n        </vdr-ab-right>\\r\\n    </vdr-action-bar>\\r\\n</vdr-page-block>\\r\\n<vdr-page-detail-layout>\\r\\n    <vdr-page-detail-sidebar>\\r\\n        <vdr-card *ngIf=\\\"entity$ | async as customer\\\">\\r\\n            <vdr-customer-status-label [customer]=\\\"customer\\\"></vdr-customer-status-label>\\r\\n            <vdr-labeled-data\\r\\n                class=\\\"last-login\\\"\\r\\n                *ngIf=\\\"customer.user?.lastLogin as lastLogin\\\"\\r\\n                [label]=\\\"'customer.last-login' | translate\\\"\\r\\n            >\\r\\n                <time [dateTime]=\\\"lastLogin\\\">{{ lastLogin | timeAgo }}</time>\\r\\n            </vdr-labeled-data>\\r\\n        </vdr-card>\\r\\n        <vdr-card\\r\\n            [title]=\\\"'customer.customer-groups' | translate\\\"\\r\\n            *ngIf=\\\"(entity$ | async)?.groups as groups\\\"\\r\\n        >\\r\\n            <div *ngIf=\\\"groups.length; else noGroups\\\">\\r\\n                <vdr-chip\\r\\n                    *ngFor=\\\"let group of groups\\\"\\r\\n                    [colorFrom]=\\\"group.id\\\"\\r\\n                    icon=\\\"times\\\"\\r\\n                    (iconClick)=\\\"removeFromGroup(group)\\\"\\r\\n                    >{{ group.name }}</vdr-chip\\r\\n                >\\r\\n            </div>\\r\\n            <ng-template #noGroups>\\r\\n                <span class=\\\"color-weight-400\\\">\\r\\n                    {{ 'customer.not-a-member-of-any-groups' | translate }}\\r\\n                </span>\\r\\n            </ng-template>\\r\\n            <div>\\r\\n                <button\\r\\n                    class=\\\"button-small mt-1\\\"\\r\\n                    (click)=\\\"addToGroup()\\\"\\r\\n                    *vdrIfPermissions=\\\"'UpdateCustomerGroup'\\\"\\r\\n                >\\r\\n                    <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                    {{ 'customer.add-customer-to-group' | translate }}\\r\\n                </button>\\r\\n            </div>\\r\\n        </vdr-card>\\r\\n        <vdr-card>\\r\\n            <vdr-page-entity-info *ngIf=\\\"entity$ | async as entity\\\" [entity]=\\\"entity\\\" />\\r\\n        </vdr-card>\\r\\n    </vdr-page-detail-sidebar>\\r\\n    <vdr-page-block>\\r\\n        <form class=\\\"form\\\" [formGroup]=\\\"detailForm.get('customer')\\\">\\r\\n            <vdr-card>\\r\\n                <div class=\\\"form-grid\\\">\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.title' | translate\\\"\\r\\n                        for=\\\"title\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"title\\\" type=\\\"text\\\" formControlName=\\\"title\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <div><!-- spacer --></div>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.first-name' | translate\\\"\\r\\n                        for=\\\"firstName\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"firstName\\\" type=\\\"text\\\" formControlName=\\\"firstName\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.last-name' | translate\\\"\\r\\n                        for=\\\"lastName\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"lastName\\\" type=\\\"text\\\" formControlName=\\\"lastName\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.email-address' | translate\\\"\\r\\n                        for=\\\"emailAddress\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"emailAddress\\\" type=\\\"text\\\" formControlName=\\\"emailAddress\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.phone-number' | translate\\\"\\r\\n                        for=\\\"phoneNumber\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"phoneNumber\\\" type=\\\"text\\\" formControlName=\\\"phoneNumber\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.password' | translate\\\"\\r\\n                        for=\\\"password\\\"\\r\\n                        *ngIf=\\\"isNew$ | async\\\"\\r\\n                    >\\r\\n                        <input id=\\\"password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" />\\r\\n                    </vdr-form-field>\\r\\n                </div>\\r\\n            </vdr-card>\\r\\n            <vdr-card\\r\\n                formGroupName=\\\"customFields\\\"\\r\\n                *ngIf=\\\"customFields.length\\\"\\r\\n                [title]=\\\"'common.custom-fields' | translate\\\"\\r\\n            >\\r\\n                <vdr-tabbed-custom-fields\\r\\n                    entityName=\\\"Customer\\\"\\r\\n                    [customFields]=\\\"customFields\\\"\\r\\n                    [customFieldsFormGroup]=\\\"detailForm.get('customer.customFields')\\\"\\r\\n                ></vdr-tabbed-custom-fields>\\r\\n            </vdr-card>\\r\\n        </form>\\r\\n        <vdr-custom-detail-component-host\\r\\n            locationId=\\\"customer-detail\\\"\\r\\n            [entity$]=\\\"entity$\\\"\\r\\n            [detailForm]=\\\"detailForm\\\"\\r\\n        ></vdr-custom-detail-component-host>\\r\\n        <ng-container *ngIf=\\\"!(isNew$ | async)\\\">\\r\\n            <vdr-card [title]=\\\"'customer.addresses' | translate\\\">\\r\\n                <div class=\\\"form-grid\\\">\\r\\n                    <vdr-address-card\\r\\n                        *ngFor=\\\"let addressForm of getAddressFormControls()\\\"\\r\\n                        [class.to-delete]=\\\"addressesToDeleteIds.has(addressForm.value.id)\\\"\\r\\n                        [availableCountries]=\\\"availableCountries$ | async\\\"\\r\\n                        [isDefaultBilling]=\\\"defaultBillingAddressId === addressForm.value.id\\\"\\r\\n                        [isDefaultShipping]=\\\"defaultShippingAddressId === addressForm.value.id\\\"\\r\\n                        [addressForm]=\\\"addressForm\\\"\\r\\n                        [customFields]=\\\"addressCustomFields\\\"\\r\\n                        [editable]=\\\"\\r\\n                            (['UpdateCustomer'] | hasPermission) &&\\r\\n                            !addressesToDeleteIds.has(addressForm.value.id)\\r\\n                        \\\"\\r\\n                        (setAsDefaultBilling)=\\\"setDefaultBillingAddressId($event)\\\"\\r\\n                        (setAsDefaultShipping)=\\\"setDefaultShippingAddressId($event)\\\"\\r\\n                        (deleteAddress)=\\\"toggleDeleteAddress($event)\\\"\\r\\n                    ></vdr-address-card>\\r\\n                </div>\\r\\n                <button\\r\\n                    class=\\\"btn btn-secondary mt-2\\\"\\r\\n                    (click)=\\\"addAddress()\\\"\\r\\n                    *vdrIfPermissions=\\\"'UpdateCustomer'\\\"\\r\\n                >\\r\\n                    <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                    {{ 'customer.create-new-address' | translate }}\\r\\n                </button>\\r\\n            </vdr-card>\\r\\n            <vdr-card [title]=\\\"'customer.orders' | translate\\\" [paddingX]=\\\"false\\\">\\r\\n                <vdr-data-table-2\\r\\n                    id=\\\"customer-order-list\\\"\\r\\n                    [items]=\\\"orders$ | async\\\"\\r\\n                    [itemsPerPage]=\\\"ordersPerPage\\\"\\r\\n                    [totalItems]=\\\"ordersCount$ | async\\\"\\r\\n                    [currentPage]=\\\"currentOrdersPage\\\"\\r\\n                    [emptyStateLabel]=\\\"'customer.no-orders-placed' | translate\\\"\\r\\n                    (itemsPerPageChange)=\\\"setOrderItemsPerPage($event)\\\"\\r\\n                    (pageChange)=\\\"setOrderCurrentPage($event)\\\"\\r\\n                >\\r\\n                    <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.id }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column\\r\\n                        [heading]=\\\"'common.created-at' | translate\\\"\\r\\n                        id=\\\"created-at\\\"\\r\\n                        [hiddenByDefault]=\\\"true\\\"\\r\\n                    >\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.createdAt | localeDate : 'short' }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'common.code' | translate\\\" id=\\\"code\\\" [optional]=\\\"false\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            <a class=\\\"button-ghost\\\" [routerLink]=\\\"['/orders', order.id]\\\"\\r\\n                                ><span>{{ order.code }}</span>\\r\\n                                <clr-icon shape=\\\"arrow right\\\"></clr-icon>\\r\\n                            </a>\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column\\r\\n                        [heading]=\\\"'order.order-type' | translate\\\"\\r\\n                        id=\\\"order-type\\\"\\r\\n                        [hiddenByDefault]=\\\"true\\\"\\r\\n                    >\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            <vdr-chip>{{ order.type }}</vdr-chip>\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'order.state' | translate\\\" id=\\\"state\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            <vdr-order-state-label [state]=\\\"order.state\\\"></vdr-order-state-label>\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'order.total' | translate\\\" id=\\\"total\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.totalWithTax | localeCurrency : order.currencyCode }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'common.updated-at' | translate\\\" id=\\\"updated-at\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.updatedAt | timeAgo }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'order.placed-at' | translate\\\" id=\\\"placed-at\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.orderPlacedAt | localeDate : 'short' }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-custom-field-column\\r\\n                        *ngFor=\\\"let customField of customFields\\\"\\r\\n                        [customField]=\\\"customField\\\"\\r\\n                    />\\r\\n                </vdr-data-table-2>\\r\\n            </vdr-card>\\r\\n            <vdr-card [title]=\\\"'customer.customer-history' | translate\\\">\\r\\n                <vdr-customer-history\\r\\n                    [customer]=\\\"entity$ | async\\\"\\r\\n                    [history]=\\\"history$ | async\\\"\\r\\n                    (addNote)=\\\"addNoteToCustomer($event)\\\"\\r\\n                    (updateNote)=\\\"updateNote($event)\\\"\\r\\n                    (deleteNote)=\\\"deleteNote($event)\\\"\\r\\n                ></vdr-customer-history>\\r\\n            </vdr-card>\\r\\n        </ng-container>\\r\\n    </vdr-page-block>\\r\\n</vdr-page-detail-layout>\\r\\n\", styles: [\".last-login{margin-inline-start:6px;color:var(--color-grey-500)}.to-delete{opacity:.5}\\n\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i3$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i1$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i1$1.FormGroupName, selector: \"[formGroupName]\", inputs: [\"formGroupName\"] }, { kind: \"directive\", type: i2.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"component\", type: i1.ActionBarComponent, selector: \"vdr-action-bar\" }, { kind: \"component\", type: i1.ActionBarLeftComponent, selector: \"vdr-ab-left\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.ActionBarRightComponent, selector: \"vdr-ab-right\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.ChipComponent, selector: \"vdr-chip\", inputs: [\"icon\", \"invert\", \"colorFrom\", \"colorType\"], outputs: [\"iconClick\"] }, { kind: \"component\", type: i1.FormFieldComponent, selector: \"vdr-form-field\", inputs: [\"label\", \"for\", \"tooltip\", \"errors\", \"readOnlyToggle\"] }, { kind: \"directive\", type: i1.FormFieldControlDirective, selector: \"input, textarea, select\" }, { kind: \"component\", type: i1.OrderStateLabelComponent, selector: \"vdr-order-state-label\", inputs: [\"state\"] }, { kind: \"component\", type: i1.LabeledDataComponent, selector: \"vdr-labeled-data\", inputs: [\"label\"] }, { kind: \"directive\", type: i1.IfPermissionsDirective, selector: \"[vdrIfPermissions]\", inputs: [\"vdrIfPermissions\", \"vdrIfPermissionsElse\"] }, { kind: \"component\", type: i1.ActionBarItemsComponent, selector: \"vdr-action-bar-items\", inputs: [\"locationId\"] }, { kind: \"component\", type: i1.TabbedCustomFieldsComponent, selector: \"vdr-tabbed-custom-fields\", inputs: [\"entityName\", \"customFields\", \"customFieldsFormGroup\", \"readonly\", \"compact\", \"showLabel\"] }, { kind: \"component\", type: i1.CustomDetailComponentHostComponent, selector: \"vdr-custom-detail-component-host\", inputs: [\"locationId\", \"entity$\", \"detailForm\"] }, { kind: \"component\", type: i1.DataTable2Component, selector: \"vdr-data-table-2\", inputs: [\"id\", \"items\", \"itemsPerPage\", \"currentPage\", \"totalItems\", \"emptyStateLabel\", \"filters\", \"activeIndex\"], outputs: [\"pageChange\", \"itemsPerPageChange\"] }, { kind: \"component\", type: i1.DataTable2ColumnComponent, selector: \"vdr-dt2-column\", inputs: [\"id\", \"expand\", \"heading\", \"align\", \"sort\", \"optional\", \"hiddenByDefault\", \"orderable\"], exportAs: [\"row\"] }, { kind: \"component\", type: i1.DataTableCustomFieldColumnComponent, selector: \"vdr-dt2-custom-field-column\", inputs: [\"customField\", \"sorts\"], exportAs: [\"row\"] }, { kind: \"component\", type: i1.PageBlockComponent, selector: \"vdr-page-block\" }, { kind: \"component\", type: i1.PageEntityInfoComponent, selector: \"vdr-page-entity-info\", inputs: [\"entity\"] }, { kind: \"component\", type: i1.PageDetailLayoutComponent, selector: \"vdr-page-detail-layout\" }, { kind: \"component\", type: i1.PageDetailSidebarComponent, selector: \"vdr-page-detail-sidebar\" }, { kind: \"component\", type: i1.CardComponent, selector: \"vdr-card\", inputs: [\"title\", \"paddingX\"] }, { kind: \"component\", type: CustomerStatusLabelComponent, selector: \"vdr-customer-status-label\", inputs: [\"customer\"] }, { kind: \"component\", type: AddressCardComponent, selector: \"vdr-address-card\", inputs: [\"addressForm\", \"customFields\", \"availableCountries\", \"isDefaultBilling\", \"isDefaultShipping\", \"editable\"], outputs: [\"setAsDefaultShipping\", \"setAsDefaultBilling\", \"deleteAddress\"] }, { kind: \"component\", type: CustomerHistoryComponent, selector: \"vdr-customer-history\", inputs: [\"customer\", \"history\"], outputs: [\"addNote\", \"updateNote\", \"deleteNote\"] }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }, { kind: \"pipe\", type: i1.HasPermissionPipe, name: \"hasPermission\" }, { kind: \"pipe\", type: i1.TimeAgoPipe, name: \"timeAgo\" }, { kind: \"pipe\", type: i1.LocaleDatePipe, name: \"localeDate\" }, { kind: \"pipe\", type: i1.LocaleCurrencyPipe, name: \"localeCurrency\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerDetailComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-customer-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<vdr-page-block>\\r\\n    <vdr-action-bar>\\r\\n        <vdr-ab-left> </vdr-ab-left>\\r\\n\\r\\n        <vdr-ab-right>\\r\\n            <vdr-action-bar-items locationId=\\\"customer-detail\\\"></vdr-action-bar-items>\\r\\n            <button\\r\\n                class=\\\"btn btn-primary\\\"\\r\\n                *ngIf=\\\"isNew$ | async; else updateButton\\\"\\r\\n                (click)=\\\"create()\\\"\\r\\n                [disabled]=\\\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\\\"\\r\\n            >\\r\\n                {{ 'common.create' | translate }}\\r\\n            </button>\\r\\n            <ng-template #updateButton>\\r\\n                <button\\r\\n                    *vdrIfPermissions=\\\"'UpdateCustomer'\\\"\\r\\n                    class=\\\"btn btn-primary\\\"\\r\\n                    (click)=\\\"save()\\\"\\r\\n                    [disabled]=\\\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\\\"\\r\\n                >\\r\\n                    {{ 'common.update' | translate }}\\r\\n                </button>\\r\\n            </ng-template>\\r\\n        </vdr-ab-right>\\r\\n    </vdr-action-bar>\\r\\n</vdr-page-block>\\r\\n<vdr-page-detail-layout>\\r\\n    <vdr-page-detail-sidebar>\\r\\n        <vdr-card *ngIf=\\\"entity$ | async as customer\\\">\\r\\n            <vdr-customer-status-label [customer]=\\\"customer\\\"></vdr-customer-status-label>\\r\\n            <vdr-labeled-data\\r\\n                class=\\\"last-login\\\"\\r\\n                *ngIf=\\\"customer.user?.lastLogin as lastLogin\\\"\\r\\n                [label]=\\\"'customer.last-login' | translate\\\"\\r\\n            >\\r\\n                <time [dateTime]=\\\"lastLogin\\\">{{ lastLogin | timeAgo }}</time>\\r\\n            </vdr-labeled-data>\\r\\n        </vdr-card>\\r\\n        <vdr-card\\r\\n            [title]=\\\"'customer.customer-groups' | translate\\\"\\r\\n            *ngIf=\\\"(entity$ | async)?.groups as groups\\\"\\r\\n        >\\r\\n            <div *ngIf=\\\"groups.length; else noGroups\\\">\\r\\n                <vdr-chip\\r\\n                    *ngFor=\\\"let group of groups\\\"\\r\\n                    [colorFrom]=\\\"group.id\\\"\\r\\n                    icon=\\\"times\\\"\\r\\n                    (iconClick)=\\\"removeFromGroup(group)\\\"\\r\\n                    >{{ group.name }}</vdr-chip\\r\\n                >\\r\\n            </div>\\r\\n            <ng-template #noGroups>\\r\\n                <span class=\\\"color-weight-400\\\">\\r\\n                    {{ 'customer.not-a-member-of-any-groups' | translate }}\\r\\n                </span>\\r\\n            </ng-template>\\r\\n            <div>\\r\\n                <button\\r\\n                    class=\\\"button-small mt-1\\\"\\r\\n                    (click)=\\\"addToGroup()\\\"\\r\\n                    *vdrIfPermissions=\\\"'UpdateCustomerGroup'\\\"\\r\\n                >\\r\\n                    <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                    {{ 'customer.add-customer-to-group' | translate }}\\r\\n                </button>\\r\\n            </div>\\r\\n        </vdr-card>\\r\\n        <vdr-card>\\r\\n            <vdr-page-entity-info *ngIf=\\\"entity$ | async as entity\\\" [entity]=\\\"entity\\\" />\\r\\n        </vdr-card>\\r\\n    </vdr-page-detail-sidebar>\\r\\n    <vdr-page-block>\\r\\n        <form class=\\\"form\\\" [formGroup]=\\\"detailForm.get('customer')\\\">\\r\\n            <vdr-card>\\r\\n                <div class=\\\"form-grid\\\">\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.title' | translate\\\"\\r\\n                        for=\\\"title\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"title\\\" type=\\\"text\\\" formControlName=\\\"title\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <div><!-- spacer --></div>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.first-name' | translate\\\"\\r\\n                        for=\\\"firstName\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"firstName\\\" type=\\\"text\\\" formControlName=\\\"firstName\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.last-name' | translate\\\"\\r\\n                        for=\\\"lastName\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"lastName\\\" type=\\\"text\\\" formControlName=\\\"lastName\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.email-address' | translate\\\"\\r\\n                        for=\\\"emailAddress\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"emailAddress\\\" type=\\\"text\\\" formControlName=\\\"emailAddress\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.phone-number' | translate\\\"\\r\\n                        for=\\\"phoneNumber\\\"\\r\\n                        [readOnlyToggle]=\\\"!(isNew$ | async)\\\"\\r\\n                    >\\r\\n                        <input id=\\\"phoneNumber\\\" type=\\\"text\\\" formControlName=\\\"phoneNumber\\\" />\\r\\n                    </vdr-form-field>\\r\\n                    <vdr-form-field\\r\\n                        [label]=\\\"'customer.password' | translate\\\"\\r\\n                        for=\\\"password\\\"\\r\\n                        *ngIf=\\\"isNew$ | async\\\"\\r\\n                    >\\r\\n                        <input id=\\\"password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" />\\r\\n                    </vdr-form-field>\\r\\n                </div>\\r\\n            </vdr-card>\\r\\n            <vdr-card\\r\\n                formGroupName=\\\"customFields\\\"\\r\\n                *ngIf=\\\"customFields.length\\\"\\r\\n                [title]=\\\"'common.custom-fields' | translate\\\"\\r\\n            >\\r\\n                <vdr-tabbed-custom-fields\\r\\n                    entityName=\\\"Customer\\\"\\r\\n                    [customFields]=\\\"customFields\\\"\\r\\n                    [customFieldsFormGroup]=\\\"detailForm.get('customer.customFields')\\\"\\r\\n                ></vdr-tabbed-custom-fields>\\r\\n            </vdr-card>\\r\\n        </form>\\r\\n        <vdr-custom-detail-component-host\\r\\n            locationId=\\\"customer-detail\\\"\\r\\n            [entity$]=\\\"entity$\\\"\\r\\n            [detailForm]=\\\"detailForm\\\"\\r\\n        ></vdr-custom-detail-component-host>\\r\\n        <ng-container *ngIf=\\\"!(isNew$ | async)\\\">\\r\\n            <vdr-card [title]=\\\"'customer.addresses' | translate\\\">\\r\\n                <div class=\\\"form-grid\\\">\\r\\n                    <vdr-address-card\\r\\n                        *ngFor=\\\"let addressForm of getAddressFormControls()\\\"\\r\\n                        [class.to-delete]=\\\"addressesToDeleteIds.has(addressForm.value.id)\\\"\\r\\n                        [availableCountries]=\\\"availableCountries$ | async\\\"\\r\\n                        [isDefaultBilling]=\\\"defaultBillingAddressId === addressForm.value.id\\\"\\r\\n                        [isDefaultShipping]=\\\"defaultShippingAddressId === addressForm.value.id\\\"\\r\\n                        [addressForm]=\\\"addressForm\\\"\\r\\n                        [customFields]=\\\"addressCustomFields\\\"\\r\\n                        [editable]=\\\"\\r\\n                            (['UpdateCustomer'] | hasPermission) &&\\r\\n                            !addressesToDeleteIds.has(addressForm.value.id)\\r\\n                        \\\"\\r\\n                        (setAsDefaultBilling)=\\\"setDefaultBillingAddressId($event)\\\"\\r\\n                        (setAsDefaultShipping)=\\\"setDefaultShippingAddressId($event)\\\"\\r\\n                        (deleteAddress)=\\\"toggleDeleteAddress($event)\\\"\\r\\n                    ></vdr-address-card>\\r\\n                </div>\\r\\n                <button\\r\\n                    class=\\\"btn btn-secondary mt-2\\\"\\r\\n                    (click)=\\\"addAddress()\\\"\\r\\n                    *vdrIfPermissions=\\\"'UpdateCustomer'\\\"\\r\\n                >\\r\\n                    <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                    {{ 'customer.create-new-address' | translate }}\\r\\n                </button>\\r\\n            </vdr-card>\\r\\n            <vdr-card [title]=\\\"'customer.orders' | translate\\\" [paddingX]=\\\"false\\\">\\r\\n                <vdr-data-table-2\\r\\n                    id=\\\"customer-order-list\\\"\\r\\n                    [items]=\\\"orders$ | async\\\"\\r\\n                    [itemsPerPage]=\\\"ordersPerPage\\\"\\r\\n                    [totalItems]=\\\"ordersCount$ | async\\\"\\r\\n                    [currentPage]=\\\"currentOrdersPage\\\"\\r\\n                    [emptyStateLabel]=\\\"'customer.no-orders-placed' | translate\\\"\\r\\n                    (itemsPerPageChange)=\\\"setOrderItemsPerPage($event)\\\"\\r\\n                    (pageChange)=\\\"setOrderCurrentPage($event)\\\"\\r\\n                >\\r\\n                    <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.id }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column\\r\\n                        [heading]=\\\"'common.created-at' | translate\\\"\\r\\n                        id=\\\"created-at\\\"\\r\\n                        [hiddenByDefault]=\\\"true\\\"\\r\\n                    >\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.createdAt | localeDate : 'short' }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'common.code' | translate\\\" id=\\\"code\\\" [optional]=\\\"false\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            <a class=\\\"button-ghost\\\" [routerLink]=\\\"['/orders', order.id]\\\"\\r\\n                                ><span>{{ order.code }}</span>\\r\\n                                <clr-icon shape=\\\"arrow right\\\"></clr-icon>\\r\\n                            </a>\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column\\r\\n                        [heading]=\\\"'order.order-type' | translate\\\"\\r\\n                        id=\\\"order-type\\\"\\r\\n                        [hiddenByDefault]=\\\"true\\\"\\r\\n                    >\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            <vdr-chip>{{ order.type }}</vdr-chip>\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'order.state' | translate\\\" id=\\\"state\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            <vdr-order-state-label [state]=\\\"order.state\\\"></vdr-order-state-label>\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'order.total' | translate\\\" id=\\\"total\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.totalWithTax | localeCurrency : order.currencyCode }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'common.updated-at' | translate\\\" id=\\\"updated-at\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.updatedAt | timeAgo }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-column [heading]=\\\"'order.placed-at' | translate\\\" id=\\\"placed-at\\\">\\r\\n                        <ng-template let-order=\\\"item\\\">\\r\\n                            {{ order.orderPlacedAt | localeDate : 'short' }}\\r\\n                        </ng-template>\\r\\n                    </vdr-dt2-column>\\r\\n                    <vdr-dt2-custom-field-column\\r\\n                        *ngFor=\\\"let customField of customFields\\\"\\r\\n                        [customField]=\\\"customField\\\"\\r\\n                    />\\r\\n                </vdr-data-table-2>\\r\\n            </vdr-card>\\r\\n            <vdr-card [title]=\\\"'customer.customer-history' | translate\\\">\\r\\n                <vdr-customer-history\\r\\n                    [customer]=\\\"entity$ | async\\\"\\r\\n                    [history]=\\\"history$ | async\\\"\\r\\n                    (addNote)=\\\"addNoteToCustomer($event)\\\"\\r\\n                    (updateNote)=\\\"updateNote($event)\\\"\\r\\n                    (deleteNote)=\\\"deleteNote($event)\\\"\\r\\n                ></vdr-customer-history>\\r\\n            </vdr-card>\\r\\n        </ng-container>\\r\\n    </vdr-page-block>\\r\\n</vdr-page-detail-layout>\\r\\n\", styles: [\".last-login{margin-inline-start:6px;color:var(--color-grey-500)}.to-delete{opacity:.5}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$1.FormBuilder }, { type: i1.DataService }, { type: i1.ModalService }, { type: i1.NotificationService }]; } });\n\nconst CUSTOMER_GROUP_DETAIL_QUERY = gql `\r\n    query GetCustomerGroupDetail($id: ID!) {\r\n        customerGroup(id: $id) {\r\n            ...CustomerGroupDetail\r\n        }\r\n    }\r\n    fragment CustomerGroupDetail on CustomerGroup {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n        name\r\n    }\r\n`;\r\nclass CustomerGroupDetailComponent extends TypedBaseDetailComponent {\r\n    constructor(formBuilder, dataService, modalService, notificationService) {\r\n        super();\r\n        this.formBuilder = formBuilder;\r\n        this.dataService = dataService;\r\n        this.modalService = modalService;\r\n        this.notificationService = notificationService;\r\n        this.customFields = this.getCustomFieldConfig('CustomerGroup');\r\n        this.detailForm = this.formBuilder.group({\r\n            name: '',\r\n            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        super.init();\r\n    }\r\n    create() {\r\n        const formvalue = this.detailForm.value;\r\n        if (formvalue.name) {\r\n            this.dataService.customer\r\n                .createCustomerGroup({\r\n                name: formvalue.name,\r\n                customFields: formvalue.customFields,\r\n                customerIds: [],\r\n            })\r\n                .subscribe(({ createCustomerGroup }) => {\r\n                this.notificationService.success(marker('common.notify-create-success'), {\r\n                    entity: 'CustomerGroup',\r\n                });\r\n                this.detailForm.markAsPristine();\r\n                this.router.navigate(['../', createCustomerGroup.id], { relativeTo: this.route });\r\n            }, err => {\r\n                this.notificationService.error(marker('common.notify-create-error'), {\r\n                    entity: 'CustomerGroup',\r\n                });\r\n            });\r\n        }\r\n    }\r\n    save() {\r\n        const formValue = this.detailForm.value;\r\n        this.dataService.customer.updateCustomerGroup({ id: this.id, ...formValue }).subscribe(() => {\r\n            this.notificationService.success(marker('common.notify-update-success'), {\r\n                entity: 'CustomerGroup',\r\n            });\r\n            this.detailForm.markAsPristine();\r\n        }, err => {\r\n            this.notificationService.error(marker('common.notify-update-error'), {\r\n                entity: 'CustomerGroup',\r\n            });\r\n        });\r\n    }\r\n    setFormValues(entity) {\r\n        this.detailForm.patchValue({\r\n            name: entity.name,\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get(['customFields']);\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\r\n        }\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerGroupDetailComponent, deps: [{ token: i1$1.FormBuilder }, { token: i1.DataService }, { token: i1.ModalService }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: CustomerGroupDetailComponent, selector: \"vdr-customer-group-detail\", usesInheritance: true, ngImport: i0, template: \"<vdr-page-block>\\r\\n    <vdr-action-bar>\\r\\n        <vdr-ab-left> </vdr-ab-left>\\r\\n\\r\\n        <vdr-ab-right>\\r\\n            <vdr-action-bar-items locationId=\\\"customer-group-detail\\\"></vdr-action-bar-items>\\r\\n            <button\\r\\n                class=\\\"btn btn-primary\\\"\\r\\n                *ngIf=\\\"isNew$ | async; else updateButton\\\"\\r\\n                (click)=\\\"create()\\\"\\r\\n                [disabled]=\\\"!(detailForm.valid && detailForm.dirty)\\\"\\r\\n            >\\r\\n                {{ 'common.create' | translate }}\\r\\n            </button>\\r\\n            <ng-template #updateButton>\\r\\n                <button\\r\\n                    *vdrIfPermissions=\\\"'UpdateCustomer'\\\"\\r\\n                    class=\\\"btn btn-primary\\\"\\r\\n                    (click)=\\\"save()\\\"\\r\\n                    [disabled]=\\\"!(detailForm.valid && detailForm.dirty)\\\"\\r\\n                >\\r\\n                    {{ 'common.update' | translate }}\\r\\n                </button>\\r\\n            </ng-template>\\r\\n        </vdr-ab-right>\\r\\n    </vdr-action-bar>\\r\\n</vdr-page-block>\\r\\n<form class=\\\"form\\\" [formGroup]=\\\"detailForm\\\">\\r\\n    <vdr-page-detail-layout>\\r\\n        <vdr-page-detail-sidebar>\\r\\n            <vdr-card *ngIf=\\\"entity$ | async as entity\\\">\\r\\n                <vdr-page-entity-info [entity]=\\\"entity\\\" />\\r\\n            </vdr-card>\\r\\n        </vdr-page-detail-sidebar>\\r\\n        <vdr-page-block>\\r\\n            <vdr-card>\\r\\n                <div class=\\\"form-grid\\\">\\r\\n                    <vdr-form-field [label]=\\\"'common.name' | translate\\\" for=\\\"name\\\">\\r\\n                        <input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" />\\r\\n                    </vdr-form-field>\\r\\n                </div>\\r\\n            </vdr-card>\\r\\n            <vdr-card\\r\\n                formGroupName=\\\"customFields\\\"\\r\\n                *ngIf=\\\"customFields.length\\\"\\r\\n                [title]=\\\"'common.custom-fields' | translate\\\"\\r\\n            >\\r\\n                <vdr-tabbed-custom-fields\\r\\n                    entityName=\\\"CustomerGroup\\\"\\r\\n                    [customFields]=\\\"customFields\\\"\\r\\n                    [customFieldsFormGroup]=\\\"detailForm.get('customFields')\\\"\\r\\n                ></vdr-tabbed-custom-fields>\\r\\n            </vdr-card>\\r\\n            <vdr-custom-detail-component-host\\r\\n                locationId=\\\"customer-group-detail\\\"\\r\\n                [entity$]=\\\"entity$\\\"\\r\\n                [detailForm]=\\\"detailForm\\\"\\r\\n            ></vdr-custom-detail-component-host>\\r\\n        </vdr-page-block>\\r\\n    </vdr-page-detail-layout>\\r\\n</form>\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i1$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i1$1.FormGroupName, selector: \"[formGroupName]\", inputs: [\"formGroupName\"] }, { kind: \"component\", type: i1.ActionBarComponent, selector: \"vdr-action-bar\" }, { kind: \"component\", type: i1.ActionBarLeftComponent, selector: \"vdr-ab-left\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.ActionBarRightComponent, selector: \"vdr-ab-right\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.FormFieldComponent, selector: \"vdr-form-field\", inputs: [\"label\", \"for\", \"tooltip\", \"errors\", \"readOnlyToggle\"] }, { kind: \"directive\", type: i1.FormFieldControlDirective, selector: \"input, textarea, select\" }, { kind: \"directive\", type: i1.IfPermissionsDirective, selector: \"[vdrIfPermissions]\", inputs: [\"vdrIfPermissions\", \"vdrIfPermissionsElse\"] }, { kind: \"component\", type: i1.ActionBarItemsComponent, selector: \"vdr-action-bar-items\", inputs: [\"locationId\"] }, { kind: \"component\", type: i1.TabbedCustomFieldsComponent, selector: \"vdr-tabbed-custom-fields\", inputs: [\"entityName\", \"customFields\", \"customFieldsFormGroup\", \"readonly\", \"compact\", \"showLabel\"] }, { kind: \"component\", type: i1.CustomDetailComponentHostComponent, selector: \"vdr-custom-detail-component-host\", inputs: [\"locationId\", \"entity$\", \"detailForm\"] }, { kind: \"component\", type: i1.PageBlockComponent, selector: \"vdr-page-block\" }, { kind: \"component\", type: i1.PageEntityInfoComponent, selector: \"vdr-page-entity-info\", inputs: [\"entity\"] }, { kind: \"component\", type: i1.PageDetailLayoutComponent, selector: \"vdr-page-detail-layout\" }, { kind: \"component\", type: i1.PageDetailSidebarComponent, selector: \"vdr-page-detail-sidebar\" }, { kind: \"component\", type: i1.CardComponent, selector: \"vdr-card\", inputs: [\"title\", \"paddingX\"] }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerGroupDetailComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-customer-group-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<vdr-page-block>\\r\\n    <vdr-action-bar>\\r\\n        <vdr-ab-left> </vdr-ab-left>\\r\\n\\r\\n        <vdr-ab-right>\\r\\n            <vdr-action-bar-items locationId=\\\"customer-group-detail\\\"></vdr-action-bar-items>\\r\\n            <button\\r\\n                class=\\\"btn btn-primary\\\"\\r\\n                *ngIf=\\\"isNew$ | async; else updateButton\\\"\\r\\n                (click)=\\\"create()\\\"\\r\\n                [disabled]=\\\"!(detailForm.valid && detailForm.dirty)\\\"\\r\\n            >\\r\\n                {{ 'common.create' | translate }}\\r\\n            </button>\\r\\n            <ng-template #updateButton>\\r\\n                <button\\r\\n                    *vdrIfPermissions=\\\"'UpdateCustomer'\\\"\\r\\n                    class=\\\"btn btn-primary\\\"\\r\\n                    (click)=\\\"save()\\\"\\r\\n                    [disabled]=\\\"!(detailForm.valid && detailForm.dirty)\\\"\\r\\n                >\\r\\n                    {{ 'common.update' | translate }}\\r\\n                </button>\\r\\n            </ng-template>\\r\\n        </vdr-ab-right>\\r\\n    </vdr-action-bar>\\r\\n</vdr-page-block>\\r\\n<form class=\\\"form\\\" [formGroup]=\\\"detailForm\\\">\\r\\n    <vdr-page-detail-layout>\\r\\n        <vdr-page-detail-sidebar>\\r\\n            <vdr-card *ngIf=\\\"entity$ | async as entity\\\">\\r\\n                <vdr-page-entity-info [entity]=\\\"entity\\\" />\\r\\n            </vdr-card>\\r\\n        </vdr-page-detail-sidebar>\\r\\n        <vdr-page-block>\\r\\n            <vdr-card>\\r\\n                <div class=\\\"form-grid\\\">\\r\\n                    <vdr-form-field [label]=\\\"'common.name' | translate\\\" for=\\\"name\\\">\\r\\n                        <input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" />\\r\\n                    </vdr-form-field>\\r\\n                </div>\\r\\n            </vdr-card>\\r\\n            <vdr-card\\r\\n                formGroupName=\\\"customFields\\\"\\r\\n                *ngIf=\\\"customFields.length\\\"\\r\\n                [title]=\\\"'common.custom-fields' | translate\\\"\\r\\n            >\\r\\n                <vdr-tabbed-custom-fields\\r\\n                    entityName=\\\"CustomerGroup\\\"\\r\\n                    [customFields]=\\\"customFields\\\"\\r\\n                    [customFieldsFormGroup]=\\\"detailForm.get('customFields')\\\"\\r\\n                ></vdr-tabbed-custom-fields>\\r\\n            </vdr-card>\\r\\n            <vdr-custom-detail-component-host\\r\\n                locationId=\\\"customer-group-detail\\\"\\r\\n                [entity$]=\\\"entity$\\\"\\r\\n                [detailForm]=\\\"detailForm\\\"\\r\\n            ></vdr-custom-detail-component-host>\\r\\n        </vdr-page-block>\\r\\n    </vdr-page-detail-layout>\\r\\n</form>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.FormBuilder }, { type: i1.DataService }, { type: i1.ModalService }, { type: i1.NotificationService }]; } });\n\nclass CustomerGroupDetailDialogComponent {\r\n    constructor(serverConfigService, formBuilder) {\r\n        this.serverConfigService = serverConfigService;\r\n        this.formBuilder = formBuilder;\r\n        this.customFields = this.serverConfigService.getCustomFieldsFor('CustomerGroup');\r\n    }\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            name: [this.group.name, Validators.required],\r\n            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.form.get('customFields');\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = this.group.customFields?.[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n    save() {\r\n        this.resolveWith(this.form.value);\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerGroupDetailDialogComponent, deps: [{ token: i1.ServerConfigService }, { token: i1$1.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: CustomerGroupDetailDialogComponent, selector: \"vdr-customer-group-detail-dialog\", ngImport: i0, template: \"<ng-template vdrDialogTitle>\\r\\n    <span *ngIf=\\\"group.id\\\">{{ 'customer.update-customer-group' | translate }}</span>\\r\\n    <span *ngIf=\\\"!group.id\\\">{{ 'customer.create-customer-group' | translate }}</span>\\r\\n</ng-template>\\r\\n<form [formGroup]=\\\"form\\\">\\r\\n    <vdr-form-field [label]=\\\"'common.name' | translate\\\" for=\\\"name\\\">\\r\\n        <input\\r\\n            id=\\\"name\\\"\\r\\n            type=\\\"text\\\"\\r\\n            formControlName=\\\"name\\\"\\r\\n            [readonly]=\\\"!(['CreateCustomerGroup', 'UpdateCustomerGroup'] | hasPermission)\\\"\\r\\n        />\\r\\n    </vdr-form-field>\\r\\n    <section formGroupName=\\\"customFields\\\" *ngIf=\\\"customFields.length\\\">\\r\\n        <label>{{ 'common.custom-fields' | translate }}</label>\\r\\n        <vdr-tabbed-custom-fields\\r\\n            entityName=\\\"CustomerGroup\\\"\\r\\n            [customFields]=\\\"customFields\\\"\\r\\n            [customFieldsFormGroup]=\\\"form.get('customFields')\\\"\\r\\n        ></vdr-tabbed-custom-fields>\\r\\n    </section>\\r\\n</form>\\r\\n<ng-template vdrDialogButtons>\\r\\n    <button type=\\\"button\\\" class=\\\"btn\\\" (click)=\\\"cancel()\\\">{{ 'common.cancel' | translate }}</button>\\r\\n    <button type=\\\"submit\\\" (click)=\\\"save()\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-primary\\\">\\r\\n        <span *ngIf=\\\"group.id\\\">{{ 'customer.update-customer-group' | translate }}</span>\\r\\n        <span *ngIf=\\\"!group.id\\\">{{ 'customer.create-customer-group' | translate }}</span>\\r\\n    </button>\\r\\n</ng-template>\\r\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.ClrLabel, selector: \"label\", inputs: [\"for\"] }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i1$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i1$1.FormGroupName, selector: \"[formGroupName]\", inputs: [\"formGroupName\"] }, { kind: \"component\", type: i1.FormFieldComponent, selector: \"vdr-form-field\", inputs: [\"label\", \"for\", \"tooltip\", \"errors\", \"readOnlyToggle\"] }, { kind: \"directive\", type: i1.FormFieldControlDirective, selector: \"input, textarea, select\" }, { kind: \"directive\", type: i1.DialogButtonsDirective, selector: \"[vdrDialogButtons]\" }, { kind: \"directive\", type: i1.DialogTitleDirective, selector: \"[vdrDialogTitle]\" }, { kind: \"component\", type: i1.TabbedCustomFieldsComponent, selector: \"vdr-tabbed-custom-fields\", inputs: [\"entityName\", \"customFields\", \"customFieldsFormGroup\", \"readonly\", \"compact\", \"showLabel\"] }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }, { kind: \"pipe\", type: i1.HasPermissionPipe, name: \"hasPermission\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerGroupDetailDialogComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-customer-group-detail-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-template vdrDialogTitle>\\r\\n    <span *ngIf=\\\"group.id\\\">{{ 'customer.update-customer-group' | translate }}</span>\\r\\n    <span *ngIf=\\\"!group.id\\\">{{ 'customer.create-customer-group' | translate }}</span>\\r\\n</ng-template>\\r\\n<form [formGroup]=\\\"form\\\">\\r\\n    <vdr-form-field [label]=\\\"'common.name' | translate\\\" for=\\\"name\\\">\\r\\n        <input\\r\\n            id=\\\"name\\\"\\r\\n            type=\\\"text\\\"\\r\\n            formControlName=\\\"name\\\"\\r\\n            [readonly]=\\\"!(['CreateCustomerGroup', 'UpdateCustomerGroup'] | hasPermission)\\\"\\r\\n        />\\r\\n    </vdr-form-field>\\r\\n    <section formGroupName=\\\"customFields\\\" *ngIf=\\\"customFields.length\\\">\\r\\n        <label>{{ 'common.custom-fields' | translate }}</label>\\r\\n        <vdr-tabbed-custom-fields\\r\\n            entityName=\\\"CustomerGroup\\\"\\r\\n            [customFields]=\\\"customFields\\\"\\r\\n            [customFieldsFormGroup]=\\\"form.get('customFields')\\\"\\r\\n        ></vdr-tabbed-custom-fields>\\r\\n    </section>\\r\\n</form>\\r\\n<ng-template vdrDialogButtons>\\r\\n    <button type=\\\"button\\\" class=\\\"btn\\\" (click)=\\\"cancel()\\\">{{ 'common.cancel' | translate }}</button>\\r\\n    <button type=\\\"submit\\\" (click)=\\\"save()\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-primary\\\">\\r\\n        <span *ngIf=\\\"group.id\\\">{{ 'customer.update-customer-group' | translate }}</span>\\r\\n        <span *ngIf=\\\"!group.id\\\">{{ 'customer.create-customer-group' | translate }}</span>\\r\\n    </button>\\r\\n</ng-template>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: i1.ServerConfigService }, { type: i1$1.UntypedFormBuilder }]; } });\n\nconst deleteCustomerGroupsBulkAction = createBulkDeleteAction({\r\n    location: 'customer-group-list',\r\n    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteCustomerGroup),\r\n    getItemName: item => item.name,\r\n    bulkDelete: (dataService, ids) => dataService.customer.deleteCustomerGroups(ids).pipe(map(res => res.deleteCustomerGroups)),\r\n});\n\nconst GET_CUSTOMER_GROUP_LIST = gql `\r\n    query GetCustomerGroupList($options: CustomerGroupListOptions) {\r\n        customerGroups(options: $options) {\r\n            items {\r\n                ...CustomerGroup\r\n            }\r\n            totalItems\r\n        }\r\n    }\r\n    ${CUSTOMER_GROUP_FRAGMENT}\r\n`;\r\nclass CustomerGroupListComponent extends TypedBaseListComponent {\r\n    constructor(dataService, notificationService, modalService, route, router) {\r\n        super();\r\n        this.dataService = dataService;\r\n        this.notificationService = notificationService;\r\n        this.modalService = modalService;\r\n        this.route = route;\r\n        this.router = router;\r\n        this.fetchGroupMembers$ = new BehaviorSubject({\r\n            skip: 0,\r\n            take: 0,\r\n            filterTerm: '',\r\n        });\r\n        this.filters = this.createFilterCollection()\r\n            .addIdFilter()\r\n            .addDateFilters()\r\n            .addFilter({\r\n            name: 'name',\r\n            type: { kind: 'text' },\r\n            label: marker('common.name'),\r\n            filterField: 'name',\r\n        })\r\n            .connectToRoute(this.route);\r\n        this.sorts = this.createSortCollection()\r\n            .defaultSort('createdAt', 'DESC')\r\n            .addSort({ name: 'createdAt' })\r\n            .addSort({ name: 'updatedAt' })\r\n            .addSort({ name: 'name' })\r\n            .connectToRoute(this.route);\r\n        this.refreshActiveGroupMembers$ = new BehaviorSubject(undefined);\r\n        super.configure({\r\n            document: GetCustomerGroupListDocument,\r\n            getItems: data => data.customerGroups,\r\n            setVariables: (skip, take) => ({\r\n                options: {\r\n                    skip,\r\n                    take,\r\n                    filter: {\r\n                        name: { contains: this.searchTermControl.value },\r\n                        ...this.filters.createFilterInput(),\r\n                    },\r\n                    sort: this.sorts.createSortInput(),\r\n                },\r\n            }),\r\n            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        const activeGroupId$ = this.route.paramMap.pipe(map(pm => pm.get('contents')), distinctUntilChanged());\r\n        this.listIsEmpty$ = this.items$.pipe(map(groups => groups.length === 0));\r\n        this.activeGroup$ = combineLatest(this.items$, activeGroupId$).pipe(map(([groups, activeGroupId]) => {\r\n            if (activeGroupId) {\r\n                return groups.find(g => g.id === activeGroupId);\r\n            }\r\n        }));\r\n        this.activeIndex$ = combineLatest(this.items$, activeGroupId$).pipe(map(([groups, activeGroupId]) => {\r\n            if (activeGroupId) {\r\n                return groups.findIndex(g => g.id === activeGroupId);\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }));\r\n        const membersResult$ = combineLatest(this.activeGroup$, this.fetchGroupMembers$, this.refreshActiveGroupMembers$).pipe(switchMap(([activeGroup, { skip, take, filterTerm }]) => {\r\n            if (activeGroup) {\r\n                return this.dataService.customer\r\n                    .getCustomerGroupWithCustomers(activeGroup.id, {\r\n                    skip,\r\n                    take,\r\n                    filter: {\r\n                        emailAddress: {\r\n                            contains: filterTerm,\r\n                        },\r\n                    },\r\n                })\r\n                    .mapStream(res => res.customerGroup?.customers);\r\n            }\r\n            else {\r\n                return of(undefined);\r\n            }\r\n        }));\r\n        this.members$ = membersResult$.pipe(map(res => res?.items ?? []));\r\n        this.membersTotal$ = membersResult$.pipe(map(res => res?.totalItems ?? 0));\r\n    }\r\n    closeMembers() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n    addToGroup(group) {\r\n        this.modalService\r\n            .fromComponent(AddCustomerToGroupDialogComponent, {\r\n            locals: {\r\n                group,\r\n                route: this.route,\r\n            },\r\n            size: 'md',\r\n            verticalAlign: 'top',\r\n        })\r\n            .pipe(switchMap(customerIds => customerIds\r\n            ? this.dataService.customer\r\n                .addCustomersToGroup(group.id, customerIds)\r\n                .pipe(mapTo(customerIds))\r\n            : EMPTY))\r\n            .subscribe({\r\n            next: result => {\r\n                this.notificationService.success(marker(`customer.add-customers-to-group-success`), {\r\n                    customerCount: result.length,\r\n                    groupName: group.name,\r\n                });\r\n                this.refreshActiveGroupMembers$.next();\r\n            },\r\n        });\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerGroupListComponent, deps: [{ token: i1.DataService }, { token: i1.NotificationService }, { token: i1.ModalService }, { token: i2.ActivatedRoute }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: CustomerGroupListComponent, selector: \"vdr-customer-group-list\", usesInheritance: true, ngImport: i0, template: \"<vdr-page-block>\\r\\n    <vdr-action-bar>\\r\\n        <vdr-ab-left> </vdr-ab-left>\\r\\n        <vdr-ab-right>\\r\\n            <vdr-action-bar-items locationId=\\\"customer-group-list\\\"></vdr-action-bar-items>\\r\\n            <a class=\\\"btn btn-primary\\\" *vdrIfPermissions=\\\"'CreateCustomerGroup'\\\" [routerLink]=\\\"['./', 'create']\\\">\\r\\n                <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                {{ 'customer.create-new-customer-group' | translate }}\\r\\n            </a>\\r\\n        </vdr-ab-right>\\r\\n    </vdr-action-bar>\\r\\n</vdr-page-block>\\r\\n<vdr-split-view [rightPanelOpen]=\\\"activeGroup$ | async\\\" (closeClicked)=\\\"closeMembers()\\\">\\r\\n    <ng-template vdrSplitViewLeft>\\r\\n        <vdr-data-table-2\\r\\n            class=\\\"mt-2\\\"\\r\\n            id=\\\"customer-group-list\\\"\\r\\n            [items]=\\\"items$ | async\\\"\\r\\n            [itemsPerPage]=\\\"itemsPerPage$ | async\\\"\\r\\n            [totalItems]=\\\"totalItems$ | async\\\"\\r\\n            [currentPage]=\\\"currentPage$ | async\\\"\\r\\n            [filters]=\\\"filters\\\"\\r\\n            [activeIndex]=\\\"activeIndex$ | async\\\"\\r\\n            (pageChange)=\\\"setPageNumber($event)\\\"\\r\\n            (itemsPerPageChange)=\\\"setItemsPerPage($event)\\\"\\r\\n        >\\r\\n            <vdr-bulk-action-menu\\r\\n                locationId=\\\"customer-group-list\\\"\\r\\n                [hostComponent]=\\\"this\\\"\\r\\n                [selectionManager]=\\\"selectionManager\\\"\\r\\n            ></vdr-bulk-action-menu>\\r\\n            <vdr-dt2-search\\r\\n                [searchTermControl]=\\\"searchTermControl\\\"\\r\\n                [searchTermPlaceholder]=\\\"'common.search-by-name' | translate\\\"\\r\\n            ></vdr-dt2-search>\\r\\n            <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    {{ customerGroup.id }}\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n            <vdr-dt2-column\\r\\n                [heading]=\\\"'common.created-at' | translate\\\" id=\\\"created-at\\\"\\r\\n                [hiddenByDefault]=\\\"true\\\"\\r\\n                [sort]=\\\"sorts.get('createdAt')\\\"\\r\\n            >\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    {{ customerGroup.createdAt | localeDate : 'short' }}\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n            <vdr-dt2-column\\r\\n                [heading]=\\\"'common.updated-at' | translate\\\" id=\\\"updated-at\\\"\\r\\n                [hiddenByDefault]=\\\"true\\\"\\r\\n                [sort]=\\\"sorts.get('updatedAt')\\\"\\r\\n            >\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    {{ customerGroup.updatedAt | localeDate : 'short' }}\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n            <vdr-dt2-column\\r\\n                [heading]=\\\"'common.name' | translate\\\" id=\\\"name\\\"\\r\\n                [optional]=\\\"false\\\"\\r\\n                [sort]=\\\"sorts.get('name')\\\"\\r\\n            >\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    <a class=\\\"button-ghost\\\" [routerLink]=\\\"['./', customerGroup.id]\\\"\\r\\n                        ><span>{{ customerGroup.name }}</span>\\r\\n                        <clr-icon shape=\\\"arrow right\\\"></clr-icon>\\r\\n                    </a>\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n            <vdr-dt2-column\\r\\n                [heading]=\\\"'common.view-contents' | translate\\\" id=\\\"view-contents\\\"\\r\\n                [optional]=\\\"false\\\"\\r\\n            >\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    <a\\r\\n                        class=\\\"button-small bg-weight-150\\\"\\r\\n                        [routerLink]=\\\"['./', { contents: customerGroup.id }]\\\"\\r\\n                        queryParamsHandling=\\\"preserve\\\"\\r\\n                    >\\r\\n                        <span>{{ 'customer.view-group-members' | translate }}</span>\\r\\n                        <clr-icon shape=\\\"file-group\\\"></clr-icon>\\r\\n                    </a>\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n        </vdr-data-table-2>\\r\\n    </ng-template>\\r\\n    <ng-template vdrSplitViewRight [splitViewTitle]=\\\"(activeGroup$ | async)?.name\\\">\\r\\n        <ng-container *ngIf=\\\"activeGroup$ | async as activeGroup\\\">\\r\\n            <button class=\\\"button-ghost ml-4\\\" (click)=\\\"addToGroup(activeGroup)\\\">\\r\\n                <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                <span>{{\\r\\n                    'customer.add-customers-to-group' | translate : { groupName: activeGroup.name }\\r\\n                }}</span>\\r\\n            </button>\\r\\n            <vdr-customer-group-member-list\\r\\n                locationId=\\\"customer-group-members-list\\\"\\r\\n                [members]=\\\"members$ | async\\\"\\r\\n                [route]=\\\"route\\\"\\r\\n                [totalItems]=\\\"membersTotal$ | async\\\"\\r\\n                [activeGroup]=\\\"activeGroup$ | async\\\"\\r\\n                (fetchParamsChange)=\\\"fetchGroupMembers$.next($event)\\\"\\r\\n            />\\r\\n        </ng-container>\\r\\n    </ng-template>\\r\\n</vdr-split-view>\\r\\n\", styles: [\"vdr-empty-placeholder{flex:1}\\n\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"component\", type: i1.ActionBarComponent, selector: \"vdr-action-bar\" }, { kind: \"component\", type: i1.ActionBarLeftComponent, selector: \"vdr-ab-left\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.ActionBarRightComponent, selector: \"vdr-ab-right\", inputs: [\"grow\"] }, { kind: \"directive\", type: i1.IfPermissionsDirective, selector: \"[vdrIfPermissions]\", inputs: [\"vdrIfPermissions\", \"vdrIfPermissionsElse\"] }, { kind: \"component\", type: i1.ActionBarItemsComponent, selector: \"vdr-action-bar-items\", inputs: [\"locationId\"] }, { kind: \"component\", type: i1.BulkActionMenuComponent, selector: \"vdr-bulk-action-menu\", inputs: [\"locationId\", \"selectionManager\", \"hostComponent\"] }, { kind: \"component\", type: i1.DataTable2Component, selector: \"vdr-data-table-2\", inputs: [\"id\", \"items\", \"itemsPerPage\", \"currentPage\", \"totalItems\", \"emptyStateLabel\", \"filters\", \"activeIndex\"], outputs: [\"pageChange\", \"itemsPerPageChange\"] }, { kind: \"component\", type: i1.DataTable2ColumnComponent, selector: \"vdr-dt2-column\", inputs: [\"id\", \"expand\", \"heading\", \"align\", \"sort\", \"optional\", \"hiddenByDefault\", \"orderable\"], exportAs: [\"row\"] }, { kind: \"component\", type: i1.DataTable2SearchComponent, selector: \"vdr-dt2-search\", inputs: [\"searchTermControl\", \"searchTermPlaceholder\"] }, { kind: \"component\", type: i1.SplitViewComponent, selector: \"vdr-split-view\", inputs: [\"rightPanelOpen\"], outputs: [\"closeClicked\"] }, { kind: \"directive\", type: i1.SplitViewLeftDirective, selector: \"[vdrSplitViewLeft]\" }, { kind: \"directive\", type: i1.SplitViewRightDirective, selector: \"[vdrSplitViewRight]\", inputs: [\"splitViewTitle\"] }, { kind: \"component\", type: i1.PageBlockComponent, selector: \"vdr-page-block\" }, { kind: \"component\", type: CustomerGroupMemberListComponent, selector: \"vdr-customer-group-member-list\", inputs: [\"locationId\", \"members\", \"totalItems\", \"route\", \"selectedMemberIds\", \"activeGroup\"], outputs: [\"selectionChange\", \"fetchParamsChange\"] }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }, { kind: \"pipe\", type: i1.LocaleDatePipe, name: \"localeDate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerGroupListComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-customer-group-list', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<vdr-page-block>\\r\\n    <vdr-action-bar>\\r\\n        <vdr-ab-left> </vdr-ab-left>\\r\\n        <vdr-ab-right>\\r\\n            <vdr-action-bar-items locationId=\\\"customer-group-list\\\"></vdr-action-bar-items>\\r\\n            <a class=\\\"btn btn-primary\\\" *vdrIfPermissions=\\\"'CreateCustomerGroup'\\\" [routerLink]=\\\"['./', 'create']\\\">\\r\\n                <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                {{ 'customer.create-new-customer-group' | translate }}\\r\\n            </a>\\r\\n        </vdr-ab-right>\\r\\n    </vdr-action-bar>\\r\\n</vdr-page-block>\\r\\n<vdr-split-view [rightPanelOpen]=\\\"activeGroup$ | async\\\" (closeClicked)=\\\"closeMembers()\\\">\\r\\n    <ng-template vdrSplitViewLeft>\\r\\n        <vdr-data-table-2\\r\\n            class=\\\"mt-2\\\"\\r\\n            id=\\\"customer-group-list\\\"\\r\\n            [items]=\\\"items$ | async\\\"\\r\\n            [itemsPerPage]=\\\"itemsPerPage$ | async\\\"\\r\\n            [totalItems]=\\\"totalItems$ | async\\\"\\r\\n            [currentPage]=\\\"currentPage$ | async\\\"\\r\\n            [filters]=\\\"filters\\\"\\r\\n            [activeIndex]=\\\"activeIndex$ | async\\\"\\r\\n            (pageChange)=\\\"setPageNumber($event)\\\"\\r\\n            (itemsPerPageChange)=\\\"setItemsPerPage($event)\\\"\\r\\n        >\\r\\n            <vdr-bulk-action-menu\\r\\n                locationId=\\\"customer-group-list\\\"\\r\\n                [hostComponent]=\\\"this\\\"\\r\\n                [selectionManager]=\\\"selectionManager\\\"\\r\\n            ></vdr-bulk-action-menu>\\r\\n            <vdr-dt2-search\\r\\n                [searchTermControl]=\\\"searchTermControl\\\"\\r\\n                [searchTermPlaceholder]=\\\"'common.search-by-name' | translate\\\"\\r\\n            ></vdr-dt2-search>\\r\\n            <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    {{ customerGroup.id }}\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n            <vdr-dt2-column\\r\\n                [heading]=\\\"'common.created-at' | translate\\\" id=\\\"created-at\\\"\\r\\n                [hiddenByDefault]=\\\"true\\\"\\r\\n                [sort]=\\\"sorts.get('createdAt')\\\"\\r\\n            >\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    {{ customerGroup.createdAt | localeDate : 'short' }}\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n            <vdr-dt2-column\\r\\n                [heading]=\\\"'common.updated-at' | translate\\\" id=\\\"updated-at\\\"\\r\\n                [hiddenByDefault]=\\\"true\\\"\\r\\n                [sort]=\\\"sorts.get('updatedAt')\\\"\\r\\n            >\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    {{ customerGroup.updatedAt | localeDate : 'short' }}\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n            <vdr-dt2-column\\r\\n                [heading]=\\\"'common.name' | translate\\\" id=\\\"name\\\"\\r\\n                [optional]=\\\"false\\\"\\r\\n                [sort]=\\\"sorts.get('name')\\\"\\r\\n            >\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    <a class=\\\"button-ghost\\\" [routerLink]=\\\"['./', customerGroup.id]\\\"\\r\\n                        ><span>{{ customerGroup.name }}</span>\\r\\n                        <clr-icon shape=\\\"arrow right\\\"></clr-icon>\\r\\n                    </a>\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n            <vdr-dt2-column\\r\\n                [heading]=\\\"'common.view-contents' | translate\\\" id=\\\"view-contents\\\"\\r\\n                [optional]=\\\"false\\\"\\r\\n            >\\r\\n                <ng-template let-customerGroup=\\\"item\\\">\\r\\n                    <a\\r\\n                        class=\\\"button-small bg-weight-150\\\"\\r\\n                        [routerLink]=\\\"['./', { contents: customerGroup.id }]\\\"\\r\\n                        queryParamsHandling=\\\"preserve\\\"\\r\\n                    >\\r\\n                        <span>{{ 'customer.view-group-members' | translate }}</span>\\r\\n                        <clr-icon shape=\\\"file-group\\\"></clr-icon>\\r\\n                    </a>\\r\\n                </ng-template>\\r\\n            </vdr-dt2-column>\\r\\n        </vdr-data-table-2>\\r\\n    </ng-template>\\r\\n    <ng-template vdrSplitViewRight [splitViewTitle]=\\\"(activeGroup$ | async)?.name\\\">\\r\\n        <ng-container *ngIf=\\\"activeGroup$ | async as activeGroup\\\">\\r\\n            <button class=\\\"button-ghost ml-4\\\" (click)=\\\"addToGroup(activeGroup)\\\">\\r\\n                <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                <span>{{\\r\\n                    'customer.add-customers-to-group' | translate : { groupName: activeGroup.name }\\r\\n                }}</span>\\r\\n            </button>\\r\\n            <vdr-customer-group-member-list\\r\\n                locationId=\\\"customer-group-members-list\\\"\\r\\n                [members]=\\\"members$ | async\\\"\\r\\n                [route]=\\\"route\\\"\\r\\n                [totalItems]=\\\"membersTotal$ | async\\\"\\r\\n                [activeGroup]=\\\"activeGroup$ | async\\\"\\r\\n                (fetchParamsChange)=\\\"fetchGroupMembers$.next($event)\\\"\\r\\n            />\\r\\n        </ng-container>\\r\\n    </ng-template>\\r\\n</vdr-split-view>\\r\\n\", styles: [\"vdr-empty-placeholder{flex:1}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i1.NotificationService }, { type: i1.ModalService }, { type: i2.ActivatedRoute }, { type: i2.Router }]; } });\n\nconst removeCustomerGroupMembersBulkAction = {\r\n    location: 'customer-group-members-list',\r\n    label: marker('customer.remove-from-group'),\r\n    icon: 'trash',\r\n    iconClass: 'is-danger',\r\n    requiresPermission: Permission.UpdateCustomerGroup,\r\n    onClick: ({ injector, selection, hostComponent, clearSelection }) => {\r\n        const modalService = injector.get(ModalService);\r\n        const dataService = injector.get(DataService);\r\n        const notificationService = injector.get(NotificationService);\r\n        const group = hostComponent.activeGroup;\r\n        const customerIds = selection.map(s => s.id);\r\n        dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({\r\n            complete: () => {\r\n                notificationService.success(marker(`customer.remove-customers-from-group-success`), {\r\n                    customerCount: customerIds.length,\r\n                    groupName: group.name,\r\n                });\r\n                clearSelection();\r\n                hostComponent.refresh();\r\n            },\r\n        });\r\n    },\r\n};\n\nconst deleteCustomersBulkAction = createBulkDeleteAction({\r\n    location: 'customer-list',\r\n    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteCustomer),\r\n    getItemName: item => item.firstName + ' ' + item.lastName,\r\n    bulkDelete: (dataService, ids) => dataService.customer.deleteCustomers(ids).pipe(map(res => res.deleteCustomers)),\r\n});\n\nconst CUSTOMER_LIST_QUERY = gql `\r\n    query CustomerListQuery($options: CustomerListOptions) {\r\n        customers(options: $options) {\r\n            items {\r\n                ...CustomerListItem\r\n            }\r\n            totalItems\r\n        }\r\n    }\r\n\r\n    fragment CustomerListItem on Customer {\r\n        id\r\n        createdAt\r\n        updatedAt\r\n        title\r\n        firstName\r\n        lastName\r\n        emailAddress\r\n        user {\r\n            id\r\n            verified\r\n        }\r\n    }\r\n`;\r\nclass CustomerListComponent extends TypedBaseListComponent {\r\n    constructor() {\r\n        super();\r\n        this.customFields = this.getCustomFieldConfig('Customer');\r\n        this.filters = this.createFilterCollection()\r\n            .addIdFilter()\r\n            .addDateFilters()\r\n            .addFilter({\r\n            name: 'firstName',\r\n            type: { kind: 'text' },\r\n            label: marker('customer.first-name'),\r\n            filterField: 'firstName',\r\n        })\r\n            .addFilter({\r\n            name: 'lastName',\r\n            type: { kind: 'text' },\r\n            label: marker('customer.last-name'),\r\n            filterField: 'lastName',\r\n        })\r\n            .addFilter({\r\n            name: 'emailAddress',\r\n            type: { kind: 'text' },\r\n            label: marker('customer.email-address'),\r\n            filterField: 'emailAddress',\r\n        })\r\n            .addCustomFieldFilters(this.customFields)\r\n            .connectToRoute(this.route);\r\n        this.sorts = this.createSortCollection()\r\n            .defaultSort('createdAt', 'DESC')\r\n            .addSort({ name: 'createdAt' })\r\n            .addSort({ name: 'updatedAt' })\r\n            .addSort({ name: 'lastName' })\r\n            .addSort({ name: 'emailAddress' })\r\n            .addCustomFieldSorts(this.customFields)\r\n            .connectToRoute(this.route);\r\n        this.configure({\r\n            document: CustomerListQueryDocument,\r\n            getItems: data => data.customers,\r\n            setVariables: (skip, take) => ({\r\n                options: {\r\n                    skip,\r\n                    take,\r\n                    filter: {\r\n                        ...(this.searchTermControl.value\r\n                            ? {\r\n                                emailAddress: {\r\n                                    contains: this.searchTermControl.value,\r\n                                },\r\n                                lastName: {\r\n                                    contains: this.searchTermControl.value,\r\n                                },\r\n                                postalCode: {\r\n                                    contains: this.searchTermControl.value,\r\n                                },\r\n                            }\r\n                            : {}),\r\n                        ...this.filters.createFilterInput(),\r\n                    },\r\n                    filterOperator: this.searchTermControl.value ? LogicalOperator.OR : LogicalOperator.AND,\r\n                    sort: this.sorts.createSortInput(),\r\n                },\r\n            }),\r\n            refreshListOnChanges: [this.sorts.valueChanges, this.filters.valueChanges],\r\n        });\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: CustomerListComponent, selector: \"vdr-customer-list\", usesInheritance: true, ngImport: i0, template: \"<vdr-page-block>\\r\\n    <vdr-action-bar>\\r\\n        <vdr-ab-left> </vdr-ab-left>\\r\\n        <vdr-ab-right>\\r\\n            <vdr-action-bar-items locationId=\\\"customer-list\\\"></vdr-action-bar-items>\\r\\n            <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['./create']\\\" *vdrIfPermissions=\\\"'CreateCustomer'\\\">\\r\\n                <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                {{ 'customer.create-new-customer' | translate }}\\r\\n            </a>\\r\\n        </vdr-ab-right>\\r\\n    </vdr-action-bar>\\r\\n</vdr-page-block>\\r\\n\\r\\n<vdr-data-table-2\\r\\n    class=\\\"mt-2\\\"\\r\\n    id=\\\"customer-list\\\"\\r\\n    [items]=\\\"items$ | async\\\"\\r\\n    [itemsPerPage]=\\\"itemsPerPage$ | async\\\"\\r\\n    [totalItems]=\\\"totalItems$ | async\\\"\\r\\n    [currentPage]=\\\"currentPage$ | async\\\"\\r\\n    [filters]=\\\"filters\\\"\\r\\n    (pageChange)=\\\"setPageNumber($event)\\\"\\r\\n    (itemsPerPageChange)=\\\"setItemsPerPage($event)\\\"\\r\\n>\\r\\n    <vdr-bulk-action-menu\\r\\n        locationId=\\\"customer-list\\\"\\r\\n        [hostComponent]=\\\"this\\\"\\r\\n        [selectionManager]=\\\"selectionManager\\\"\\r\\n    ></vdr-bulk-action-menu>\\r\\n    <vdr-dt2-search\\r\\n        [searchTermControl]=\\\"searchTermControl\\\"\\r\\n        [searchTermPlaceholder]=\\\"'customer.search-customers-by-email-last-name-postal-code' | translate\\\"\\r\\n    ></vdr-dt2-search>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.id }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column\\r\\n        [heading]=\\\"'common.created-at' | translate\\\" id=\\\"created-at\\\"\\r\\n        [hiddenByDefault]=\\\"true\\\"\\r\\n        [sort]=\\\"sorts.get('createdAt')\\\"\\r\\n    >\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.createdAt | localeDate : 'short' }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column\\r\\n        [heading]=\\\"'common.updated-at' | translate\\\" id=\\\"updated-at\\\"\\r\\n        [hiddenByDefault]=\\\"true\\\"\\r\\n        [sort]=\\\"sorts.get('updatedAt')\\\"\\r\\n    >\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.updatedAt | localeDate : 'short' }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'customer.name' | translate\\\" id=\\\"name\\\" [optional]=\\\"false\\\" [sort]=\\\"sorts.get('lastName')\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            <a class=\\\"button-ghost\\\" [routerLink]=\\\"['./', customer.id]\\\"\\r\\n                ><span> {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }} </span>\\r\\n                <clr-icon shape=\\\"arrow right\\\"></clr-icon>\\r\\n            </a>\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.status' | translate\\\" id=\\\"status\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            <vdr-customer-status-label [customer]=\\\"customer\\\" />\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'customer.email-address' | translate\\\" id=\\\"email-address\\\" [sort]=\\\"sorts.get('emailAddress')\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.emailAddress }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-custom-field-column *ngFor=\\\"let field of customFields\\\" [customField]=\\\"field\\\" [sorts]=\\\"sorts\\\" />\\r\\n</vdr-data-table-2>\\r\\n\", styles: [\".search-input{margin-top:6px;min-width:300px}\\n\"], dependencies: [{ kind: \"directive\", type: i3.ClrIconCustomTag, selector: \"clr-icon\" }, { kind: \"directive\", type: i3$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"component\", type: i1.ActionBarComponent, selector: \"vdr-action-bar\" }, { kind: \"component\", type: i1.ActionBarLeftComponent, selector: \"vdr-ab-left\", inputs: [\"grow\"] }, { kind: \"component\", type: i1.ActionBarRightComponent, selector: \"vdr-ab-right\", inputs: [\"grow\"] }, { kind: \"directive\", type: i1.IfPermissionsDirective, selector: \"[vdrIfPermissions]\", inputs: [\"vdrIfPermissions\", \"vdrIfPermissionsElse\"] }, { kind: \"component\", type: i1.ActionBarItemsComponent, selector: \"vdr-action-bar-items\", inputs: [\"locationId\"] }, { kind: \"component\", type: i1.BulkActionMenuComponent, selector: \"vdr-bulk-action-menu\", inputs: [\"locationId\", \"selectionManager\", \"hostComponent\"] }, { kind: \"component\", type: i1.DataTable2Component, selector: \"vdr-data-table-2\", inputs: [\"id\", \"items\", \"itemsPerPage\", \"currentPage\", \"totalItems\", \"emptyStateLabel\", \"filters\", \"activeIndex\"], outputs: [\"pageChange\", \"itemsPerPageChange\"] }, { kind: \"component\", type: i1.DataTable2ColumnComponent, selector: \"vdr-dt2-column\", inputs: [\"id\", \"expand\", \"heading\", \"align\", \"sort\", \"optional\", \"hiddenByDefault\", \"orderable\"], exportAs: [\"row\"] }, { kind: \"component\", type: i1.DataTable2SearchComponent, selector: \"vdr-dt2-search\", inputs: [\"searchTermControl\", \"searchTermPlaceholder\"] }, { kind: \"component\", type: i1.DataTableCustomFieldColumnComponent, selector: \"vdr-dt2-custom-field-column\", inputs: [\"customField\", \"sorts\"], exportAs: [\"row\"] }, { kind: \"component\", type: i1.PageBlockComponent, selector: \"vdr-page-block\" }, { kind: \"component\", type: CustomerStatusLabelComponent, selector: \"vdr-customer-status-label\", inputs: [\"customer\"] }, { kind: \"pipe\", type: i3$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i4.TranslatePipe, name: \"translate\" }, { kind: \"pipe\", type: i1.LocaleDatePipe, name: \"localeDate\" }] }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerListComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'vdr-customer-list', template: \"<vdr-page-block>\\r\\n    <vdr-action-bar>\\r\\n        <vdr-ab-left> </vdr-ab-left>\\r\\n        <vdr-ab-right>\\r\\n            <vdr-action-bar-items locationId=\\\"customer-list\\\"></vdr-action-bar-items>\\r\\n            <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['./create']\\\" *vdrIfPermissions=\\\"'CreateCustomer'\\\">\\r\\n                <clr-icon shape=\\\"plus\\\"></clr-icon>\\r\\n                {{ 'customer.create-new-customer' | translate }}\\r\\n            </a>\\r\\n        </vdr-ab-right>\\r\\n    </vdr-action-bar>\\r\\n</vdr-page-block>\\r\\n\\r\\n<vdr-data-table-2\\r\\n    class=\\\"mt-2\\\"\\r\\n    id=\\\"customer-list\\\"\\r\\n    [items]=\\\"items$ | async\\\"\\r\\n    [itemsPerPage]=\\\"itemsPerPage$ | async\\\"\\r\\n    [totalItems]=\\\"totalItems$ | async\\\"\\r\\n    [currentPage]=\\\"currentPage$ | async\\\"\\r\\n    [filters]=\\\"filters\\\"\\r\\n    (pageChange)=\\\"setPageNumber($event)\\\"\\r\\n    (itemsPerPageChange)=\\\"setItemsPerPage($event)\\\"\\r\\n>\\r\\n    <vdr-bulk-action-menu\\r\\n        locationId=\\\"customer-list\\\"\\r\\n        [hostComponent]=\\\"this\\\"\\r\\n        [selectionManager]=\\\"selectionManager\\\"\\r\\n    ></vdr-bulk-action-menu>\\r\\n    <vdr-dt2-search\\r\\n        [searchTermControl]=\\\"searchTermControl\\\"\\r\\n        [searchTermPlaceholder]=\\\"'customer.search-customers-by-email-last-name-postal-code' | translate\\\"\\r\\n    ></vdr-dt2-search>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.id' | translate\\\" id=\\\"id\\\" [hiddenByDefault]=\\\"true\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.id }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column\\r\\n        [heading]=\\\"'common.created-at' | translate\\\" id=\\\"created-at\\\"\\r\\n        [hiddenByDefault]=\\\"true\\\"\\r\\n        [sort]=\\\"sorts.get('createdAt')\\\"\\r\\n    >\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.createdAt | localeDate : 'short' }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column\\r\\n        [heading]=\\\"'common.updated-at' | translate\\\" id=\\\"updated-at\\\"\\r\\n        [hiddenByDefault]=\\\"true\\\"\\r\\n        [sort]=\\\"sorts.get('updatedAt')\\\"\\r\\n    >\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.updatedAt | localeDate : 'short' }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'customer.name' | translate\\\" id=\\\"name\\\" [optional]=\\\"false\\\" [sort]=\\\"sorts.get('lastName')\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            <a class=\\\"button-ghost\\\" [routerLink]=\\\"['./', customer.id]\\\"\\r\\n                ><span> {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }} </span>\\r\\n                <clr-icon shape=\\\"arrow right\\\"></clr-icon>\\r\\n            </a>\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'common.status' | translate\\\" id=\\\"status\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            <vdr-customer-status-label [customer]=\\\"customer\\\" />\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-column [heading]=\\\"'customer.email-address' | translate\\\" id=\\\"email-address\\\" [sort]=\\\"sorts.get('emailAddress')\\\">\\r\\n        <ng-template let-customer=\\\"item\\\">\\r\\n            {{ customer.emailAddress }}\\r\\n        </ng-template>\\r\\n    </vdr-dt2-column>\\r\\n    <vdr-dt2-custom-field-column *ngFor=\\\"let field of customFields\\\" [customField]=\\\"field\\\" [sorts]=\\\"sorts\\\" />\\r\\n</vdr-data-table-2>\\r\\n\", styles: [\".search-input{margin-top:6px;min-width:300px}\\n\"] }]\r\n        }], ctorParameters: function () { return []; } });\n\nconst createRoutes = (pageService) => [\r\n    {\r\n        path: 'customers',\r\n        component: PageComponent,\r\n        data: {\r\n            breadcrumb: marker('breadcrumb.customers'),\r\n        },\r\n        children: pageService.getPageTabRoutes('customer-list'),\r\n    },\r\n    {\r\n        path: 'customers/:id',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'customer-detail',\r\n            breadcrumb: { label: marker('breadcrumb.customers'), link: ['../', 'customers'] },\r\n        },\r\n        children: pageService.getPageTabRoutes('customer-detail'),\r\n    },\r\n    {\r\n        path: 'groups',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'customer-detail',\r\n            breadcrumb: marker('breadcrumb.customer-groups'),\r\n        },\r\n        children: pageService.getPageTabRoutes('customer-group-list'),\r\n    },\r\n    {\r\n        path: 'groups/:id',\r\n        component: PageComponent,\r\n        data: {\r\n            locationId: 'customer-group-detail',\r\n            breadcrumb: { label: marker('breadcrumb.customer-groups'), link: ['../', 'groups'] },\r\n        },\r\n        children: pageService.getPageTabRoutes('customer-group-detail'),\r\n    },\r\n];\r\nfunction customerBreadcrumb(data, params) {\r\n    return detailBreadcrumb({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.customers',\r\n        getName: customer => `${customer.firstName} ${customer.lastName}`,\r\n        route: 'customers',\r\n    });\r\n}\n\nclass CustomerModule {\r\n    static { this.hasRegisteredTabsAndBulkActions = false; }\r\n    constructor(bulkActionRegistryService, pageService) {\r\n        if (CustomerModule.hasRegisteredTabsAndBulkActions) {\r\n            return;\r\n        }\r\n        bulkActionRegistryService.registerBulkAction(deleteCustomersBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(deleteCustomerGroupsBulkAction);\r\n        bulkActionRegistryService.registerBulkAction(removeCustomerGroupMembersBulkAction);\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'customer-list',\r\n            tab: marker('customer.customers'),\r\n            route: '',\r\n            component: CustomerListComponent,\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'customer-detail',\r\n            tab: marker('customer.customer'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: CustomerDetailComponent,\r\n                query: CustomerDetailQueryDocument,\r\n                entityKey: 'customer',\r\n                variables: {\r\n                    orderListOptions: {\r\n                        sort: {\r\n                            orderPlacedAt: SortOrder.DESC,\r\n                        },\r\n                    },\r\n                },\r\n                getBreadcrumbs: entity => [\r\n                    {\r\n                        label: entity\r\n                            ? `${entity?.firstName} ${entity?.lastName}`\r\n                            : marker('customer.create-new-customer'),\r\n                        link: [entity?.id],\r\n                    },\r\n                ],\r\n            }),\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'customer-group-list',\r\n            tab: marker('customer.customer-groups'),\r\n            route: '',\r\n            component: CustomerGroupListComponent,\r\n        });\r\n        pageService.registerPageTab({\r\n            priority: 0,\r\n            location: 'customer-group-detail',\r\n            tab: marker('customer.customer-group'),\r\n            route: '',\r\n            component: detailComponentWithResolver({\r\n                component: CustomerGroupDetailComponent,\r\n                query: GetCustomerGroupDetailDocument,\r\n                entityKey: 'customerGroup',\r\n                getBreadcrumbs: entity => [\r\n                    {\r\n                        label: entity ? entity.name : marker('customer.create-new-customer-group'),\r\n                        link: [entity?.id],\r\n                    },\r\n                ],\r\n            }),\r\n        });\r\n        CustomerModule.hasRegisteredTabsAndBulkActions = true;\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerModule, deps: [{ token: i1.BulkActionRegistryService }, { token: i1.PageService }], target: i0.ɵɵFactoryTarget.NgModule }); }\r\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerModule, declarations: [CustomerListComponent,\r\n            CustomerDetailComponent,\r\n            CustomerStatusLabelComponent,\r\n            AddressCardComponent,\r\n            CustomerGroupListComponent,\r\n            CustomerGroupDetailDialogComponent,\r\n            AddCustomerToGroupDialogComponent,\r\n            CustomerGroupMemberListComponent,\r\n            SelectCustomerGroupDialogComponent,\r\n            CustomerHistoryComponent,\r\n            AddressDetailDialogComponent,\r\n            CustomerHistoryEntryHostComponent,\r\n            CustomerGroupDetailComponent], imports: [SharedModule, i2.RouterModule], exports: [AddressCardComponent] }); }\r\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerModule, providers: [\r\n            {\r\n                provide: ROUTES,\r\n                useFactory: (pageService) => createRoutes(pageService),\r\n                multi: true,\r\n                deps: [PageService],\r\n            },\r\n        ], imports: [SharedModule, RouterModule.forChild([])] }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: CustomerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [SharedModule, RouterModule.forChild([])],\r\n                    providers: [\r\n                        {\r\n                            provide: ROUTES,\r\n                            useFactory: (pageService) => createRoutes(pageService),\r\n                            multi: true,\r\n                            deps: [PageService],\r\n                        },\r\n                    ],\r\n                    declarations: [\r\n                        CustomerListComponent,\r\n                        CustomerDetailComponent,\r\n                        CustomerStatusLabelComponent,\r\n                        AddressCardComponent,\r\n                        CustomerGroupListComponent,\r\n                        CustomerGroupDetailDialogComponent,\r\n                        AddCustomerToGroupDialogComponent,\r\n                        CustomerGroupMemberListComponent,\r\n                        SelectCustomerGroupDialogComponent,\r\n                        CustomerHistoryComponent,\r\n                        AddressDetailDialogComponent,\r\n                        CustomerHistoryEntryHostComponent,\r\n                        CustomerGroupDetailComponent,\r\n                    ],\r\n                    exports: [AddressCardComponent],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i1.BulkActionRegistryService }, { type: i1.PageService }]; } });\n\n// This file was generated by the build-public-api.ts script\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AddCustomerToGroupDialogComponent, AddressCardComponent, AddressDetailDialogComponent, CUSTOMER_DETAIL_QUERY, CUSTOMER_GROUP_DETAIL_QUERY, CUSTOMER_LIST_QUERY, CustomerDetailComponent, CustomerGroupDetailComponent, CustomerGroupDetailDialogComponent, CustomerGroupListComponent, CustomerGroupMemberListComponent, CustomerHistoryComponent, CustomerHistoryEntryHostComponent, CustomerListComponent, CustomerModule, CustomerStatusLabelComponent, GET_CUSTOMER_GROUP_LIST, SelectCustomerGroupDialogComponent, createRoutes, customerBreadcrumb, deleteCustomerGroupsBulkAction, deleteCustomersBulkAction, removeCustomerGroupMembersBulkAction };\n"],"x_google_ignoreList":[0,1,2]}